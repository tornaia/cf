// Generated by jextract

package com.github.tornaia.cf.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class Windows_h$constants$111 extends Windows_h$constants$110 {

    /* package-private */ Windows_h$constants$111() {}
    static final int IOCTL_STORAGE_FIRMWARE_DOWNLOAD() { return (int)3005444L; }

    static final int IOCTL_STORAGE_FIRMWARE_ACTIVATE() { return (int)3005448L; }

    static final int IOCTL_STORAGE_ENABLE_IDLE_POWER() { return (int)2956416L; }

    static final int IOCTL_STORAGE_GET_IDLE_POWERUP_REASON() { return (int)2956420L; }

    static final int IOCTL_STORAGE_POWER_ACTIVE() { return (int)2956424L; }

    static final int IOCTL_STORAGE_POWER_IDLE() { return (int)2956428L; }

    static final int IOCTL_STORAGE_EVENT_NOTIFICATION() { return (int)2956432L; }

    static final int IOCTL_STORAGE_DEVICE_POWER_CAP() { return (int)2956436L; }

    static final int IOCTL_STORAGE_RPMB_COMMAND() { return (int)2956440L; }

    static final int IOCTL_STORAGE_ATTRIBUTE_MANAGEMENT() { return (int)3005596L; }

    static final int IOCTL_STORAGE_DIAGNOSTIC() { return (int)2956448L; }

    static final int IOCTL_STORAGE_GET_PHYSICAL_ELEMENT_STATUS() { return (int)2956452L; }

    static final int IOCTL_STORAGE_REMOVE_ELEMENT_AND_TRUNCATE() { return (int)2956480L; }

    static final int IOCTL_STORAGE_GET_DEVICE_INTERNAL_LOG() { return (int)2956484L; }

    static final int TAPE_RETURN_STATISTICS() { return (int)0L; }

    static final int TAPE_RETURN_ENV_INFO() { return (int)1L; }

    static final int TAPE_RESET_STATISTICS() { return (int)2L; }

    static final int MEDIA_CURRENTLY_MOUNTED() { return (int)2147483648L; }

    static final int NO_SRBTYPE_ADAPTER_DESCRIPTOR_SIZE() { return (int)30L; }

    static final long STORAGE_MINIPORT_DESCRIPTOR_V1_SIZE() { return 16L; }

    static final int StorageIdTypeNAA() { return (int)3L; }

    static final long DEVICE_LB_PROVISIONING_DESCRIPTOR_V1_SIZE() { return 32L; }

    static final int STORAGE_TIER_NAME_LENGTH() { return (int)256L; }

    static final int STORAGE_TIER_DESCRIPTION_LENGTH() { return (int)512L; }

    static final int STORAGE_TIER_FLAG_NO_SEEK_PENALTY() { return (int)131072L; }

    static final int STORAGE_TIER_FLAG_WRITE_BACK_CACHE() { return (int)2097152L; }

    static final int STORAGE_TIER_FLAG_READ_CACHE() { return (int)4194304L; }

    static final int STORAGE_TIER_FLAG_PARITY() { return (int)8388608L; }

    static final int STORAGE_TIER_FLAG_SMR() { return (int)16777216L; }

    static final int STORAGE_ADAPTER_SERIAL_NUMBER_V1_MAX_LENGTH() { return (int)128L; }

    static final long STORAGE_ADAPTER_SERIAL_NUMBER_V1_VERSION() { return 264L; }

    static final long STORAGE_ADAPTER_SERIAL_NUMBER_V1_SIZE() { return 264L; }

    static final int STORAGE_DEVICE_NUMA_NODE_UNKNOWN() { return (int)4294967295L; }

    static final int DeviceDsmActionFlag_NonDestructive() { return (int)2147483648L; }

    static final int DeviceDsmAction_None() { return (int)0L; }

    static final int DeviceDsmAction_Trim() { return (int)1L; }

    static final int DeviceDsmAction_Notification() { return (int)2147483650L; }

    static final int DeviceDsmAction_OffloadRead() { return (int)2147483651L; }

    static final int DeviceDsmAction_OffloadWrite() { return (int)4L; }

    static final int DeviceDsmAction_Allocation() { return (int)2147483653L; }

    static final int DeviceDsmAction_Repair() { return (int)2147483654L; }

    static final int DeviceDsmAction_Scrub() { return (int)2147483655L; }

    static final int DeviceDsmAction_DrtQuery() { return (int)2147483656L; }

    static final int DeviceDsmAction_DrtClear() { return (int)2147483657L; }

    static final int DeviceDsmAction_DrtDisable() { return (int)2147483658L; }

    static final int DeviceDsmAction_TieringQuery() { return (int)2147483659L; }

    static final int DeviceDsmAction_Map() { return (int)2147483660L; }

    static final int DeviceDsmAction_RegenerateParity() { return (int)2147483661L; }

    static final int DeviceDsmAction_NvCache_Change_Priority() { return (int)2147483662L; }

    static final int DeviceDsmAction_NvCache_Evict() { return (int)2147483663L; }

    static final int DeviceDsmAction_TopologyIdQuery() { return (int)2147483664L; }

    static final int DeviceDsmAction_GetPhysicalAddresses() { return (int)2147483665L; }

    static final int DeviceDsmAction_ScopeRegen() { return (int)2147483666L; }

    static final int DeviceDsmAction_ReportZones() { return (int)2147483667L; }

    static final int DeviceDsmAction_OpenZone() { return (int)2147483668L; }

    static final int DeviceDsmAction_FinishZone() { return (int)2147483669L; }

    static final int DeviceDsmAction_CloseZone() { return (int)2147483670L; }

    static final int DeviceDsmAction_ResetWritePointer() { return (int)23L; }

    static final int DeviceDsmAction_GetRangeErrorInfo() { return (int)2147483672L; }

    static final int DeviceDsmAction_WriteZeroes() { return (int)25L; }

    static final int DeviceDsmAction_LostQuery() { return (int)2147483674L; }

    static final int DeviceDsmAction_GetFreeSpace() { return (int)2147483675L; }

    static final int DeviceDsmAction_ConversionQuery() { return (int)2147483676L; }

    static final int DeviceDsmAction_VdtSet() { return (int)29L; }

    static final int DEVICE_DSM_FLAG_TRIM_NOT_FS_ALLOCATED() { return (int)2147483648L; }

    static final int STORAGE_OFFLOAD_TOKEN_TYPE_ZERO_DATA() { return (int)4294901761L; }

    static final int DEVICE_DATA_SET_LBP_STATE_PARAMETERS_VERSION_V1() { return (int)1L; }

    static final long DEVICE_DSM_ALLOCATION_OUTPUT_V1() { return 32L; }

    static final long DEVICE_DATA_SET_LB_PROVISIONING_STATE_VERSION_V1() { return 32L; }

    static final long DEVICE_DSM_ALLOCATION_OUTPUT_V2() { return 40L; }

    static final long DEVICE_DATA_SET_LB_PROVISIONING_STATE_VERSION_V2() { return 40L; }

    static final long DEVICE_DSM_PHYSICAL_ADDRESS_HAS_MEMORY_ERROR() { return -1L; }

    static final int DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_VERSION_V1() { return (int)1L; }

    static final int DEVICE_DSM_RANGE_ERROR_INFO_VERSION_V1() { return (int)1L; }

    static final MemorySegment STORAGE_CRASH_TELEMETRY_REGKEY$SEGMENT_CONSTANT_ = CLinker.toCString("\\");
    static final jdk.incubator.foreign.MemorySegment STORAGE_CRASH_TELEMETRY_REGKEY() { return STORAGE_CRASH_TELEMETRY_REGKEY$SEGMENT_CONSTANT_; }

    static final MemorySegment STORAGE_DEVICE_TELEMETRY_REGKEY$SEGMENT_CONSTANT_ = CLinker.toCString("\\");
    static final jdk.incubator.foreign.MemorySegment STORAGE_DEVICE_TELEMETRY_REGKEY() { return STORAGE_DEVICE_TELEMETRY_REGKEY$SEGMENT_CONSTANT_; }

    static final int FW_ISSUEID_UNKNOWN() { return (int)4294967295L; }

    static final MemorySegment TC_PUBLIC_DATA_TYPE_ATAGP$SEGMENT_CONSTANT_ = CLinker.toCString("ATAGPLogPages");
    static final jdk.incubator.foreign.MemorySegment TC_PUBLIC_DATA_TYPE_ATAGP() { return TC_PUBLIC_DATA_TYPE_ATAGP$SEGMENT_CONSTANT_; }

    static final MemorySegment TC_PUBLIC_DATA_TYPE_ATASMART$SEGMENT_CONSTANT_ = CLinker.toCString("ATASMARTPages");
    static final jdk.incubator.foreign.MemorySegment TC_PUBLIC_DATA_TYPE_ATASMART() { return TC_PUBLIC_DATA_TYPE_ATASMART$SEGMENT_CONSTANT_; }

    static final int STORAGE_EVENT_ALL() { return (int)7L; }

    static final long STORAGE_COUNTERS_VERSION_V1() { return 32L; }

    static final int STORAGE_HW_FIRMWARE_REQUEST_FLAG_SWITCH_TO_EXISTING_FIRMWARE() { return (int)2147483648L; }

    static final int STORAGE_PROTOCOL_COMMAND_FLAG_ADAPTER_REQUEST() { return (int)2147483648L; }

    static final int IOCTL_SCMBUS_BASE() { return (int)89L; }

    static final int IOCTL_SCM_BUS_GET_LOGICAL_DEVICES() { return (int)5832704L; }

    static final int IOCTL_SCM_BUS_GET_PHYSICAL_DEVICES() { return (int)5832708L; }

    static final int IOCTL_SCM_BUS_GET_REGIONS() { return (int)5832712L; }

    static final int IOCTL_SCM_LD_GET_INTERLEAVE_SET() { return (int)5835776L; }

    static final int IOCTL_SCM_PD_QUERY_PROPERTY() { return (int)5838848L; }

    static final int IOCTL_SCM_PD_FIRMWARE_DOWNLOAD() { return (int)5871620L; }

    static final int IOCTL_SCM_PD_FIRMWARE_ACTIVATE() { return (int)5871624L; }

    static final int IOCTL_SCM_PD_PASSTHROUGH() { return (int)5888012L; }

    static final int IOCTL_SCM_PD_UPDATE_MANAGEMENT_STATUS() { return (int)5838864L; }

    static final int IOCTL_SCM_PD_REINITIALIZE_MEDIA() { return (int)5871636L; }

    static final long SCM_REGION_SPA_UNKNOWN() { return -1L; }

    static final long SCM_PD_MEMORY_SIZE_UNKNOWN() { return -1L; }

    static final int IOCTL_DISK_BASE() { return (int)7L; }

    static final int IOCTL_DISK_GET_DRIVE_GEOMETRY() { return (int)458752L; }

    static final int IOCTL_DISK_GET_PARTITION_INFO() { return (int)475140L; }

    static final int IOCTL_DISK_SET_PARTITION_INFO() { return (int)507912L; }

    static final int IOCTL_DISK_GET_DRIVE_LAYOUT() { return (int)475148L; }

    static final int IOCTL_DISK_SET_DRIVE_LAYOUT() { return (int)507920L; }

    static final int IOCTL_DISK_VERIFY() { return (int)458772L; }

    static final int IOCTL_DISK_FORMAT_TRACKS() { return (int)507928L; }

    static final int IOCTL_DISK_REASSIGN_BLOCKS() { return (int)507932L; }

    static final int IOCTL_DISK_PERFORMANCE() { return (int)458784L; }

    static final int IOCTL_DISK_IS_WRITABLE() { return (int)458788L; }

    static final int IOCTL_DISK_LOGGING() { return (int)458792L; }

    static final int IOCTL_DISK_FORMAT_TRACKS_EX() { return (int)507948L; }

    static final int IOCTL_DISK_HISTOGRAM_STRUCTURE() { return (int)458800L; }

    static final int IOCTL_DISK_HISTOGRAM_DATA() { return (int)458804L; }

    static final int IOCTL_DISK_HISTOGRAM_RESET() { return (int)458808L; }

    static final int IOCTL_DISK_REQUEST_STRUCTURE() { return (int)458812L; }

    static final int IOCTL_DISK_REQUEST_DATA() { return (int)458816L; }

    static final int IOCTL_DISK_PERFORMANCE_OFF() { return (int)458848L; }

    static final int IOCTL_DISK_CONTROLLER_NUMBER() { return (int)458820L; }

    static final int SMART_GET_VERSION() { return (int)475264L; }

    static final int SMART_SEND_DRIVE_COMMAND() { return (int)508036L; }

    static final int SMART_RCV_DRIVE_DATA() { return (int)508040L; }

    static final int IOCTL_DISK_GET_PARTITION_INFO_EX() { return (int)458824L; }

    static final int IOCTL_DISK_SET_PARTITION_INFO_EX() { return (int)507980L; }

    static final int IOCTL_DISK_GET_DRIVE_LAYOUT_EX() { return (int)458832L; }

    static final int IOCTL_DISK_SET_DRIVE_LAYOUT_EX() { return (int)507988L; }

    static final int IOCTL_DISK_CREATE_DISK() { return (int)507992L; }

    static final int IOCTL_DISK_GET_LENGTH_INFO() { return (int)475228L; }

    static final int IOCTL_DISK_GET_DRIVE_GEOMETRY_EX() { return (int)458912L; }

    static final int IOCTL_DISK_REASSIGN_BLOCKS_EX() { return (int)508068L; }

    static final int IOCTL_DISK_UPDATE_DRIVE_SIZE() { return (int)508104L; }

    static final int IOCTL_DISK_GROW_PARTITION() { return (int)508112L; }

    static final int IOCTL_DISK_GET_CACHE_INFORMATION() { return (int)475348L; }

    static final int IOCTL_DISK_SET_CACHE_INFORMATION() { return (int)508120L; }

    static final int OBSOLETE_DISK_GET_WRITE_CACHE_STATE() { return (int)475356L; }

    static final int IOCTL_DISK_DELETE_DRIVE_LAYOUT() { return (int)508160L; }

    static final int IOCTL_DISK_UPDATE_PROPERTIES() { return (int)459072L; }

    static final int IOCTL_DISK_FORMAT_DRIVE() { return (int)508876L; }

    static final int IOCTL_DISK_SENSE_DEVICE() { return (int)459744L; }

    static final int IOCTL_DISK_CHECK_VERIFY() { return (int)477184L; }

    static final int IOCTL_DISK_MEDIA_REMOVAL() { return (int)477188L; }

    static final int IOCTL_DISK_EJECT_MEDIA() { return (int)477192L; }

    static final int IOCTL_DISK_LOAD_MEDIA() { return (int)477196L; }

    static final int IOCTL_DISK_RESERVE() { return (int)477200L; }

    static final int IOCTL_DISK_RELEASE() { return (int)477204L; }

    static final int IOCTL_DISK_FIND_NEW_DEVICES() { return (int)477208L; }

    static final int IOCTL_DISK_GET_MEDIA_TYPES() { return (int)461824L; }

    static final int GPT_ATTRIBUTE_PLATFORM_REQUIRED() { return (int)1L; }

    static final int GPT_ATTRIBUTE_NO_BLOCK_IO_PROTOCOL() { return (int)2L; }

    static final int GPT_ATTRIBUTE_LEGACY_BIOS_BOOTABLE() { return (int)4L; }

    static final long GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER() { return -9223372036854775808L; }

    static final long GPT_BASIC_DATA_ATTRIBUTE_HIDDEN() { return 4611686018427387904L; }

    static final long GPT_BASIC_DATA_ATTRIBUTE_SHADOW_COPY() { return 2305843009213693952L; }

    static final long GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY() { return 1152921504606846976L; }

    static final long GPT_BASIC_DATA_ATTRIBUTE_OFFLINE() { return 576460752303423488L; }

    static final long GPT_BASIC_DATA_ATTRIBUTE_DAX() { return 288230376151711744L; }

    static final long GPT_BASIC_DATA_ATTRIBUTE_SERVICE() { return 144115188075855872L; }

    static final long GPT_SPACES_ATTRIBUTE_NO_METADATA() { return -9223372036854775808L; }

    static final long HISTOGRAM_BUCKET_SIZE() { return 8L; }

    static final long DISK_HISTOGRAM_SIZE() { return 72L; }

    static final int IOCTL_DISK_GET_DISK_ATTRIBUTES() { return (int)458992L; }

    static final int IOCTL_DISK_SET_DISK_ATTRIBUTES() { return (int)508148L; }

    static final int IOCTL_DISK_RESET_SNAPSHOT_INFO() { return (int)508432L; }

    static final int IOCTL_CHANGER_BASE() { return (int)48L; }

    static final int IOCTL_CHANGER_GET_PARAMETERS() { return (int)3162112L; }

    static final int IOCTL_CHANGER_GET_STATUS() { return (int)3162116L; }

    static final int IOCTL_CHANGER_GET_PRODUCT_DATA() { return (int)3162120L; }

    static final int IOCTL_CHANGER_SET_ACCESS() { return (int)3194896L; }

    static final int IOCTL_CHANGER_GET_ELEMENT_STATUS() { return (int)3194900L; }

    static final int IOCTL_CHANGER_INITIALIZE_ELEMENT_STATUS() { return (int)3162136L; }

    static final int IOCTL_CHANGER_SET_POSITION() { return (int)3162140L; }

    static final int IOCTL_CHANGER_EXCHANGE_MEDIUM() { return (int)3162144L; }

    static final int IOCTL_CHANGER_MOVE_MEDIUM() { return (int)3162148L; }

    static final int IOCTL_CHANGER_REINITIALIZE_TRANSPORT() { return (int)3162152L; }

    static final int IOCTL_CHANGER_QUERY_VOLUME_TAGS() { return (int)3194924L; }

    static final int CHANGER_RESERVED_BIT() { return (int)2147483648L; }

    static final int CHANGER_PREDISMOUNT_ALIGN_TO_SLOT() { return (int)2147483649L; }

    static final int CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE() { return (int)2147483650L; }

    static final int CHANGER_CLEANER_AUTODISMOUNT() { return (int)2147483652L; }

    static final int CHANGER_TRUE_EXCHANGE_CAPABLE() { return (int)2147483656L; }

    static final int CHANGER_SLOTS_USE_TRAYS() { return (int)2147483664L; }

    static final int CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR() { return (int)2147483680L; }

    static final int CHANGER_CLEANER_OPS_NOT_SUPPORTED() { return (int)2147483712L; }

    static final int CHANGER_IEPORT_USER_CONTROL_OPEN() { return (int)2147483776L; }

    static final int CHANGER_IEPORT_USER_CONTROL_CLOSE() { return (int)2147483904L; }

    static final int CHANGER_MOVE_EXTENDS_IEPORT() { return (int)2147484160L; }

    static final int CHANGER_MOVE_RETRACTS_IEPORT() { return (int)2147484672L; }

    static final int ERROR_UNHANDLED_ERROR() { return (int)4294967295L; }

    static final int IOCTL_SERIAL_LSRMST_INSERT() { return (int)1769596L; }

    static final int IOCTL_SERENUM_EXPOSE_HARDWARE() { return (int)3604992L; }

    static final int IOCTL_SERENUM_REMOVE_HARDWARE() { return (int)3604996L; }

    static final int IOCTL_SERENUM_PORT_DESC() { return (int)3605000L; }

    static final int IOCTL_SERENUM_GET_PORT_NAME() { return (int)3605004L; }

    static final byte SERIAL_LSRMST_ESCAPE() { return (byte)0L; }

    static final byte SERIAL_LSRMST_LSR_DATA() { return (byte)1L; }

    static final byte SERIAL_LSRMST_LSR_NODATA() { return (byte)2L; }

    static final byte SERIAL_LSRMST_MST() { return (byte)3L; }

    static final int SERIAL_IOC_FCR_FIFO_ENABLE() { return (int)1L; }

    static final int SERIAL_IOC_FCR_RCVR_RESET() { return (int)2L; }

    static final int SERIAL_IOC_FCR_XMIT_RESET() { return (int)4L; }

    static final int SERIAL_IOC_FCR_DMA_MODE() { return (int)8L; }

    static final int SERIAL_IOC_FCR_RES1() { return (int)16L; }

    static final int SERIAL_IOC_FCR_RES2() { return (int)32L; }

    static final int SERIAL_IOC_FCR_RCVR_TRIGGER_LSB() { return (int)64L; }

    static final int SERIAL_IOC_FCR_RCVR_TRIGGER_MSB() { return (int)128L; }

    static final int SERIAL_IOC_MCR_DTR() { return (int)1L; }

    static final int SERIAL_IOC_MCR_RTS() { return (int)2L; }

    static final int SERIAL_IOC_MCR_OUT1() { return (int)4L; }

    static final int SERIAL_IOC_MCR_OUT2() { return (int)8L; }

    static final int SERIAL_IOC_MCR_LOOP() { return (int)16L; }

    static final int FSCTL_REQUEST_OPLOCK_LEVEL_1() { return (int)589824L; }

    static final int FSCTL_REQUEST_OPLOCK_LEVEL_2() { return (int)589828L; }

    static final int FSCTL_REQUEST_BATCH_OPLOCK() { return (int)589832L; }

    static final int FSCTL_OPLOCK_BREAK_ACKNOWLEDGE() { return (int)589836L; }

    static final int FSCTL_OPBATCH_ACK_CLOSE_PENDING() { return (int)589840L; }

    static final int FSCTL_OPLOCK_BREAK_NOTIFY() { return (int)589844L; }

    static final int FSCTL_LOCK_VOLUME() { return (int)589848L; }

    static final int FSCTL_UNLOCK_VOLUME() { return (int)589852L; }

    static final int FSCTL_DISMOUNT_VOLUME() { return (int)589856L; }

    static final int FSCTL_IS_VOLUME_MOUNTED() { return (int)589864L; }

    static final int FSCTL_IS_PATHNAME_VALID() { return (int)589868L; }

    static final int FSCTL_MARK_VOLUME_DIRTY() { return (int)589872L; }

    static final int FSCTL_QUERY_RETRIEVAL_POINTERS() { return (int)589883L; }

    static final int FSCTL_GET_COMPRESSION() { return (int)589884L; }

    static final int FSCTL_SET_COMPRESSION() { return (int)639040L; }

    static final int FSCTL_SET_BOOTLOADER_ACCESSED() { return (int)589903L; }

    static final int FSCTL_MARK_AS_SYSTEM_HIVE() { return (int)589903L; }

    static final int FSCTL_OPLOCK_BREAK_ACK_NO_2() { return (int)589904L; }

    static final int FSCTL_INVALIDATE_VOLUMES() { return (int)589908L; }

    static final int FSCTL_QUERY_FAT_BPB() { return (int)589912L; }

    static final int FSCTL_REQUEST_FILTER_OPLOCK() { return (int)589916L; }

    static final int FSCTL_FILESYSTEM_GET_STATISTICS() { return (int)589920L; }

    static final int FSCTL_GET_NTFS_VOLUME_DATA() { return (int)589924L; }

    static final int FSCTL_GET_NTFS_FILE_RECORD() { return (int)589928L; }

    static final int FSCTL_GET_VOLUME_BITMAP() { return (int)589935L; }

    static final int FSCTL_GET_RETRIEVAL_POINTERS() { return (int)589939L; }

    static final int FSCTL_MOVE_FILE() { return (int)589940L; }

    static final int FSCTL_IS_VOLUME_DIRTY() { return (int)589944L; }

    static final int FSCTL_ALLOW_EXTENDED_DASD_IO() { return (int)589955L; }

    static final int FSCTL_FIND_FILES_BY_SID() { return (int)589967L; }

    static final int FSCTL_SET_OBJECT_ID() { return (int)589976L; }

    static final int FSCTL_GET_OBJECT_ID() { return (int)589980L; }

    static final int FSCTL_DELETE_OBJECT_ID() { return (int)589984L; }

    static final int FSCTL_SET_REPARSE_POINT() { return (int)589988L; }

    static final int FSCTL_GET_REPARSE_POINT() { return (int)589992L; }

    static final int FSCTL_DELETE_REPARSE_POINT() { return (int)589996L; }

    static final int FSCTL_ENUM_USN_DATA() { return (int)590003L; }

    static final int FSCTL_SECURITY_ID_CHECK() { return (int)606391L; }

    static final int FSCTL_READ_USN_JOURNAL() { return (int)590011L; }

    static final int FSCTL_SET_OBJECT_ID_EXTENDED() { return (int)590012L; }

    static final int FSCTL_CREATE_OR_GET_OBJECT_ID() { return (int)590016L; }

    static final int FSCTL_SET_SPARSE() { return (int)590020L; }

    static final int FSCTL_SET_ZERO_DATA() { return (int)622792L; }

    static final int FSCTL_QUERY_ALLOCATED_RANGES() { return (int)606415L; }

    static final int FSCTL_ENABLE_UPGRADE() { return (int)622800L; }

    static final int FSCTL_SET_ENCRYPTION() { return (int)590039L; }

    static final int FSCTL_ENCRYPTION_FSCTL_IO() { return (int)590043L; }

    static final int FSCTL_WRITE_RAW_ENCRYPTED() { return (int)590047L; }

    static final int FSCTL_READ_RAW_ENCRYPTED() { return (int)590051L; }

    static final int FSCTL_CREATE_USN_JOURNAL() { return (int)590055L; }

    static final int FSCTL_READ_FILE_USN_DATA() { return (int)590059L; }

    static final int FSCTL_WRITE_USN_CLOSE_RECORD() { return (int)590063L; }

    static final int FSCTL_EXTEND_VOLUME() { return (int)590064L; }

    static final int FSCTL_QUERY_USN_JOURNAL() { return (int)590068L; }

    static final int FSCTL_DELETE_USN_JOURNAL() { return (int)590072L; }

    static final int FSCTL_MARK_HANDLE() { return (int)590076L; }

    static final int FSCTL_SIS_COPYFILE() { return (int)590080L; }

    static final int FSCTL_SIS_LINK_FILES() { return (int)639236L; }

    static final int FSCTL_RECALL_FILE() { return (int)590103L; }

    static final int FSCTL_READ_FROM_PLEX() { return (int)606494L; }

    static final int FSCTL_FILE_PREFETCH() { return (int)590112L; }

    static final int FSCTL_MAKE_MEDIA_COMPATIBLE() { return (int)622896L; }

    static final int FSCTL_SET_DEFECT_MANAGEMENT() { return (int)622900L; }

    static final int FSCTL_QUERY_SPARING_INFO() { return (int)590136L; }

    static final int FSCTL_QUERY_ON_DISK_VOLUME_INFO() { return (int)590140L; }

    static final int FSCTL_SET_VOLUME_COMPRESSION_STATE() { return (int)590144L; }

    static final int FSCTL_TXFS_MODIFY_RM() { return (int)622916L; }

    static final int FSCTL_TXFS_QUERY_RM_INFORMATION() { return (int)606536L; }

    static final int FSCTL_TXFS_ROLLFORWARD_REDO() { return (int)622928L; }

    static final int FSCTL_TXFS_ROLLFORWARD_UNDO() { return (int)622932L; }

    static final int FSCTL_TXFS_START_RM() { return (int)622936L; }

    static final int FSCTL_TXFS_SHUTDOWN_RM() { return (int)622940L; }

    static final int FSCTL_TXFS_READ_BACKUP_INFORMATION() { return (int)606560L; }

    static final int FSCTL_TXFS_WRITE_BACKUP_INFORMATION() { return (int)622948L; }

    static final int FSCTL_TXFS_CREATE_SECONDARY_RM() { return (int)622952L; }

    static final int FSCTL_TXFS_GET_METADATA_INFO() { return (int)606572L; }

    static final int FSCTL_TXFS_GET_TRANSACTED_VERSION() { return (int)606576L; }

    static final int FSCTL_TXFS_SAVEPOINT_INFORMATION() { return (int)622968L; }

    static final int FSCTL_TXFS_CREATE_MINIVERSION() { return (int)622972L; }

    static final int FSCTL_TXFS_TRANSACTION_ACTIVE() { return (int)606604L; }

    static final int FSCTL_SET_ZERO_ON_DEALLOCATION() { return (int)590228L; }

    static final int FSCTL_SET_REPAIR() { return (int)590232L; }

    static final int FSCTL_GET_REPAIR() { return (int)590236L; }

    static final int FSCTL_WAIT_FOR_REPAIR() { return (int)590240L; }

    static final int FSCTL_INITIATE_REPAIR() { return (int)590248L; }

    static final int FSCTL_CSC_INTERNAL() { return (int)590255L; }

    static final int FSCTL_SHRINK_VOLUME() { return (int)590256L; }

    static final int FSCTL_SET_SHORT_NAME_BEHAVIOR() { return (int)590260L; }

    static final int FSCTL_DFSR_SET_GHOST_HANDLE_STATE() { return (int)590264L; }

    static final int FSCTL_TXFS_LIST_TRANSACTION_LOCKED_FILES() { return (int)606688L; }

    static final int FSCTL_TXFS_LIST_TRANSACTIONS() { return (int)606692L; }

    static final int FSCTL_QUERY_PAGEFILE_ENCRYPTION() { return (int)590312L; }

    static final int FSCTL_RESET_VOLUME_ALLOCATION_HINTS() { return (int)590316L; }

    static final int FSCTL_QUERY_DEPENDENT_VOLUME() { return (int)590320L; }

    static final int FSCTL_SD_GLOBAL_CHANGE() { return (int)590324L; }

    static final int FSCTL_TXFS_READ_BACKUP_INFORMATION2() { return (int)590328L; }

    static final int FSCTL_LOOKUP_STREAM_FROM_CLUSTER() { return (int)590332L; }

    static final int FSCTL_TXFS_WRITE_BACKUP_INFORMATION2() { return (int)590336L; }

    static final int FSCTL_FILE_TYPE_NOTIFICATION() { return (int)590340L; }

    static final int FSCTL_FILE_LEVEL_TRIM() { return (int)623112L; }

    static final int FSCTL_GET_BOOT_AREA_INFO() { return (int)590384L; }

    static final int FSCTL_GET_RETRIEVAL_POINTER_BASE() { return (int)590388L; }

    static final int FSCTL_SET_PERSISTENT_VOLUME_STATE() { return (int)590392L; }

    static final int FSCTL_QUERY_PERSISTENT_VOLUME_STATE() { return (int)590396L; }

    static final int FSCTL_REQUEST_OPLOCK() { return (int)590400L; }

    static final int FSCTL_CSV_TUNNEL_REQUEST() { return (int)590404L; }

    static final int FSCTL_IS_CSV_FILE() { return (int)590408L; }

    static final int FSCTL_QUERY_FILE_SYSTEM_RECOGNITION() { return (int)590412L; }

    static final int FSCTL_CSV_GET_VOLUME_PATH_NAME() { return (int)590416L; }

    static final int FSCTL_CSV_GET_VOLUME_NAME_FOR_VOLUME_MOUNT_POINT() { return (int)590420L; }

    static final int FSCTL_CSV_GET_VOLUME_PATH_NAMES_FOR_VOLUME_NAME() { return (int)590424L; }

    static final int FSCTL_IS_FILE_ON_CSV_VOLUME() { return (int)590428L; }

    static final int FSCTL_CORRUPTION_HANDLING() { return (int)590432L; }

    static final int FSCTL_OFFLOAD_READ() { return (int)606820L; }

    static final int FSCTL_OFFLOAD_WRITE() { return (int)623208L; }

    static final int FSCTL_CSV_INTERNAL() { return (int)590444L; }

    static final int FSCTL_SET_PURGE_FAILURE_MODE() { return (int)590448L; }

    static final int FSCTL_QUERY_FILE_LAYOUT() { return (int)590455L; }

    static final int FSCTL_IS_VOLUME_OWNED_BYCSVFS() { return (int)590456L; }

    static final int FSCTL_GET_INTEGRITY_INFORMATION() { return (int)590460L; }

    static final int FSCTL_SET_INTEGRITY_INFORMATION() { return (int)639616L; }

    static final int FSCTL_QUERY_FILE_REGIONS() { return (int)590468L; }

    static final int FSCTL_RKF_INTERNAL() { return (int)590511L; }

    static final int FSCTL_SCRUB_DATA() { return (int)590512L; }

    static final int FSCTL_REPAIR_COPIES() { return (int)639668L; }

    static final int FSCTL_DISABLE_LOCAL_BUFFERING() { return (int)590520L; }

    static final int FSCTL_CSV_MGMT_LOCK() { return (int)590524L; }

    static final int FSCTL_CSV_QUERY_DOWN_LEVEL_FILE_SYSTEM_CHARACTERISTICS() { return (int)590528L; }

    static final int FSCTL_ADVANCE_FILE_ID() { return (int)590532L; }

    static final int FSCTL_CSV_SYNC_TUNNEL_REQUEST() { return (int)590536L; }

    static final int FSCTL_CSV_QUERY_VETO_FILE_DIRECT_IO() { return (int)590540L; }

    static final int FSCTL_WRITE_USN_REASON() { return (int)590544L; }

    static final int FSCTL_CSV_CONTROL() { return (int)590548L; }

    static final int FSCTL_GET_REFS_VOLUME_DATA() { return (int)590552L; }

    static final int FSCTL_CSV_H_BREAKING_SYNC_TUNNEL_REQUEST() { return (int)590564L; }

    static final int FSCTL_QUERY_STORAGE_CLASSES() { return (int)590572L; }

    static final int FSCTL_QUERY_REGION_INFO() { return (int)590576L; }

    static final int FSCTL_USN_TRACK_MODIFIED_RANGES() { return (int)590580L; }

    static final int FSCTL_QUERY_SHARED_VIRTUAL_DISK_SUPPORT() { return (int)590592L; }

    static final int FSCTL_SVHDX_SYNC_TUNNEL_REQUEST() { return (int)590596L; }

    static final int FSCTL_SVHDX_SET_INITIATOR_INFORMATION() { return (int)590600L; }

    static final int FSCTL_SET_EXTERNAL_BACKING() { return (int)590604L; }

    static final int FSCTL_GET_EXTERNAL_BACKING() { return (int)590608L; }

    static final int FSCTL_DELETE_EXTERNAL_BACKING() { return (int)590612L; }

    static final int FSCTL_ENUM_EXTERNAL_BACKING() { return (int)590616L; }

    static final int FSCTL_ENUM_OVERLAY() { return (int)590623L; }

    static final int FSCTL_ADD_OVERLAY() { return (int)623408L; }

    static final int FSCTL_REMOVE_OVERLAY() { return (int)623412L; }

    static final int FSCTL_UPDATE_OVERLAY() { return (int)623416L; }

    static final int FSCTL_SHUFFLE_FILE() { return (int)639808L; }

    static final int FSCTL_DUPLICATE_EXTENTS_TO_FILE() { return (int)623428L; }

    static final int FSCTL_SPARSE_OVERALLOCATE() { return (int)590668L; }

    static final int FSCTL_STORAGE_QOS_CONTROL() { return (int)590672L; }

    static final int FSCTL_INITIATE_FILE_METADATA_OPTIMIZATION() { return (int)590684L; }

    static final int FSCTL_QUERY_FILE_METADATA_OPTIMIZATION() { return (int)590688L; }

    static final int FSCTL_SVHDX_ASYNC_TUNNEL_REQUEST() { return (int)590692L; }

    static final int FSCTL_GET_WOF_VERSION() { return (int)590696L; }

    static final int FSCTL_HCS_SYNC_TUNNEL_REQUEST() { return (int)590700L; }

    static final int FSCTL_HCS_ASYNC_TUNNEL_REQUEST() { return (int)590704L; }

    static final int FSCTL_QUERY_EXTENT_READ_CACHE_INFO() { return (int)590711L; }

    static final int FSCTL_QUERY_REFS_VOLUME_COUNTER_INFO() { return (int)590715L; }

    static final int FSCTL_CLEAN_VOLUME_METADATA() { return (int)590716L; }

    static final int FSCTL_SET_INTEGRITY_INFORMATION_EX() { return (int)590720L; }

    static final int FSCTL_SUSPEND_OVERLAY() { return (int)590724L; }

    static final int FSCTL_VIRTUAL_STORAGE_QUERY_PROPERTY() { return (int)590728L; }

    static final int FSCTL_FILESYSTEM_GET_STATISTICS_EX() { return (int)590732L; }

    static final int FSCTL_QUERY_VOLUME_CONTAINER_STATE() { return (int)590736L; }

    static final int FSCTL_SET_LAYER_ROOT() { return (int)590740L; }

    static final int FSCTL_QUERY_DIRECT_ACCESS_EXTENTS() { return (int)590747L; }

    static final int FSCTL_NOTIFY_STORAGE_SPACE_ALLOCATION() { return (int)590748L; }

    static final int FSCTL_SSDI_STORAGE_REQUEST() { return (int)590752L; }

    static final int FSCTL_QUERY_DIRECT_IMAGE_ORIGINAL_BASE() { return (int)590756L; }

    static final int FSCTL_READ_UNPRIVILEGED_USN_JOURNAL() { return (int)590763L; }

    static final int FSCTL_GHOST_FILE_EXTENTS() { return (int)623532L; }

    static final int FSCTL_QUERY_GHOSTED_FILE_EXTENTS() { return (int)590768L; }

    static final int FSCTL_UNMAP_SPACE() { return (int)590772L; }

    static final int FSCTL_HCS_SYNC_NO_WRITE_TUNNEL_REQUEST() { return (int)590776L; }

    static final int FSCTL_STREAMS_QUERY_PARAMETERS() { return (int)590788L; }

    static final int FSCTL_STREAMS_ASSOCIATE_ID() { return (int)590792L; }

    static final int FSCTL_STREAMS_QUERY_ID() { return (int)590796L; }

    static final int FSCTL_GET_RETRIEVAL_POINTERS_AND_REFCOUNT() { return (int)590803L; }

    static final int FSCTL_QUERY_VOLUME_NUMA_INFO() { return (int)590804L; }

    static final int FSCTL_REFS_DEALLOCATE_RANGES() { return (int)590808L; }

    static final int FSCTL_QUERY_REFS_SMR_VOLUME_INFO() { return (int)590812L; }

    static final int FSCTL_SET_REFS_SMR_VOLUME_GC_PARAMETERS() { return (int)590816L; }

    static final int FSCTL_SET_REFS_FILE_STRICTLY_SEQUENTIAL() { return (int)590820L; }

    static final int FSCTL_DUPLICATE_EXTENTS_TO_FILE_EX() { return (int)623592L; }

    static final int FSCTL_QUERY_BAD_RANGES() { return (int)590828L; }

    static final int FSCTL_SET_DAX_ALLOC_ALIGNMENT_HINT() { return (int)590832L; }

    static final int FSCTL_DELETE_CORRUPTED_REFS_CONTAINER() { return (int)590836L; }

    static final int FSCTL_SCRUB_UNDISCOVERABLE_ID() { return (int)590840L; }

    static final int FSCTL_NOTIFY_DATA_CHANGE() { return (int)590844L; }

    static final int FSCTL_START_VIRTUALIZATION_INSTANCE_EX() { return (int)590848L; }

    static final int FSCTL_ENCRYPTION_KEY_CONTROL() { return (int)590852L; }

    static final int FSCTL_VIRTUAL_STORAGE_SET_BEHAVIOR() { return (int)590856L; }

    static final int FSCTL_SET_REPARSE_POINT_EX() { return (int)590860L; }

    static final int FSCTL_REARRANGE_FILE() { return (int)640032L; }

    static final int FSCTL_VIRTUAL_STORAGE_PASSTHROUGH() { return (int)590884L; }

    static final int FSCTL_GET_RETRIEVAL_POINTER_COUNT() { return (int)590891L; }

    static final int FSCTL_ENABLE_PER_IO_FLAGS() { return (int)590892L; }

    static final int USN_PAGE_SIZE() { return (int)4096L; }

    static final int USN_REASON_DATA_OVERWRITE() { return (int)1L; }

    static final int USN_REASON_DATA_EXTEND() { return (int)2L; }

    static final int USN_REASON_DATA_TRUNCATION() { return (int)4L; }

    static final int USN_REASON_NAMED_DATA_OVERWRITE() { return (int)16L; }

    static final int USN_REASON_NAMED_DATA_EXTEND() { return (int)32L; }

    static final int USN_REASON_NAMED_DATA_TRUNCATION() { return (int)64L; }

    static final int USN_REASON_FILE_CREATE() { return (int)256L; }

    static final int USN_REASON_FILE_DELETE() { return (int)512L; }

    static final int USN_REASON_EA_CHANGE() { return (int)1024L; }

    static final int USN_REASON_SECURITY_CHANGE() { return (int)2048L; }

    static final int USN_REASON_RENAME_OLD_NAME() { return (int)4096L; }

    static final int USN_REASON_RENAME_NEW_NAME() { return (int)8192L; }

    static final int USN_REASON_INDEXABLE_CHANGE() { return (int)16384L; }

    static final int USN_REASON_BASIC_INFO_CHANGE() { return (int)32768L; }

    static final int USN_REASON_HARD_LINK_CHANGE() { return (int)65536L; }

    static final int USN_REASON_COMPRESSION_CHANGE() { return (int)131072L; }

    static final int USN_REASON_ENCRYPTION_CHANGE() { return (int)262144L; }

    static final int USN_REASON_OBJECT_ID_CHANGE() { return (int)524288L; }

    static final int USN_REASON_REPARSE_POINT_CHANGE() { return (int)1048576L; }

    static final int USN_REASON_STREAM_CHANGE() { return (int)2097152L; }

    static final int USN_REASON_TRANSACTED_CHANGE() { return (int)4194304L; }

    static final int USN_REASON_INTEGRITY_CHANGE() { return (int)8388608L; }

    static final int USN_REASON_DESIRED_STORAGE_CLASS_CHANGE() { return (int)16777216L; }

    static final int USN_REASON_CLOSE() { return (int)2147483648L; }

    static final int USN_DELETE_FLAG_DELETE() { return (int)1L; }

    static final int USN_DELETE_FLAG_NOTIFY() { return (int)2L; }

    static final int USN_DELETE_VALID_FLAGS() { return (int)3L; }

    static final int USN_SOURCE_DATA_MANAGEMENT() { return (int)1L; }

    static final int USN_SOURCE_AUXILIARY_DATA() { return (int)2L; }

    static final int USN_SOURCE_REPLICATION_MANAGEMENT() { return (int)4L; }

    static final int USN_SOURCE_CLIENT_REPLICATION_MANAGEMENT() { return (int)8L; }

    static final int USN_SOURCE_VALID_FLAGS() { return (int)15L; }

    static final int MARK_HANDLE_PROTECT_CLUSTERS() { return (int)1L; }

    static final int MARK_HANDLE_TXF_SYSTEM_LOG() { return (int)4L; }

    static final int MARK_HANDLE_NOT_TXF_SYSTEM_LOG() { return (int)8L; }

    static final int MARK_HANDLE_REALTIME() { return (int)32L; }

    static final int MARK_HANDLE_NOT_REALTIME() { return (int)64L; }

    static final int MARK_HANDLE_FILTER_METADATA() { return (int)512L; }

    static final int MARK_HANDLE_CLOUD_SYNC() { return (int)2048L; }

    static final int MARK_HANDLE_READ_COPY() { return (int)128L; }

    static final int MARK_HANDLE_NOT_READ_COPY() { return (int)256L; }

    static final int MARK_HANDLE_RETURN_PURGE_FAILURE() { return (int)1024L; }

    static final int MARK_HANDLE_DISABLE_FILE_METADATA_OPTIMIZATION() { return (int)4096L; }

    static final int MARK_HANDLE_ENABLE_USN_SOURCE_ON_PAGING_IO() { return (int)8192L; }

    static final int MARK_HANDLE_SKIP_COHERENCY_SYNC_DISALLOW_WRITES() { return (int)16384L; }

    static final int MARK_HANDLE_ENABLE_CPU_CACHE() { return (int)268435456L; }

    static final int VOLUME_IS_DIRTY() { return (int)1L; }

    static final int VOLUME_UPGRADE_SCHEDULED() { return (int)2L; }

    static final int VOLUME_SESSION_OPEN() { return (int)4L; }

    static final int FILE_ZERO_DATA_INFORMATION_FLAG_PRESERVE_CACHED_DATA() { return (int)1L; }

    static final int ENCRYPTION_FORMAT_DEFAULT() { return (int)1L; }

    static final int SET_REPAIR_ENABLED() { return (int)1L; }

    static final int SET_REPAIR_WARN_ABOUT_DATA_LOSS() { return (int)8L; }

    static final int SET_REPAIR_DISABLED_AND_BUGCHECK_ON_CORRUPT() { return (int)16L; }

    static final int SET_REPAIR_VALID_MASK() { return (int)25L; }

    static final int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_IN_USE() { return (int)1L; }

    static final int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_REUSED() { return (int)2L; }

    static final int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_EXIST() { return (int)4L; }

    static final int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_BASE_RECORD() { return (int)8L; }

    static final int FILE_INITIATE_REPAIR_HINT1_SYSTEM_FILE() { return (int)16L; }

    static final int FILE_INITIATE_REPAIR_HINT1_NOT_IMPLEMENTED() { return (int)32L; }

    static final int FILE_INITIATE_REPAIR_HINT1_UNABLE_TO_REPAIR() { return (int)64L; }

    static final int FILE_INITIATE_REPAIR_HINT1_REPAIR_DISABLED() { return (int)128L; }

    static final int FILE_INITIATE_REPAIR_HINT1_RECURSIVELY_CORRUPTED() { return (int)256L; }

    static final int FILE_INITIATE_REPAIR_HINT1_ORPHAN_GENERATED() { return (int)512L; }

    static final int FILE_INITIATE_REPAIR_HINT1_REPAIRED() { return (int)1024L; }

    static final int FILE_INITIATE_REPAIR_HINT1_NOTHING_WRONG() { return (int)2048L; }

    static final int FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NOT_FOUND() { return (int)4096L; }

    static final int FILE_INITIATE_REPAIR_HINT1_POTENTIAL_CROSSLINK() { return (int)8192L; }

    static final int FILE_INITIATE_REPAIR_HINT1_STALE_INFORMATION() { return (int)16384L; }

    static final int FILE_INITIATE_REPAIR_HINT1_CLUSTERS_ALREADY_IN_USE() { return (int)32768L; }

    static final int FILE_INITIATE_REPAIR_HINT1_LCN_NOT_EXIST() { return (int)65536L; }

    static final int FILE_INITIATE_REPAIR_HINT1_INVALID_RUN_LENGTH() { return (int)131072L; }

    static final int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_ORPHAN() { return (int)262144L; }

    static final int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_IS_BASE_RECORD() { return (int)524288L; }

    static final int FILE_INITIATE_REPAIR_HINT1_INVALID_ARRAY_LENGTH_COUNT() { return (int)1048576L; }

    static final int FILE_INITIATE_REPAIR_HINT1_SID_VALID() { return (int)2097152L; }

    static final int FILE_INITIATE_REPAIR_HINT1_SID_MISMATCH() { return (int)4194304L; }

    static final int FILE_INITIATE_REPAIR_HINT1_INVALID_PARENT() { return (int)8388608L; }

    static final int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_IN_USE() { return (int)16777216L; }

    static final int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_REUSED() { return (int)33554432L; }

    static final int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_EXIST() { return (int)67108864L; }

    static final int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_BASE_RECORD() { return (int)134217728L; }

    static final int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_INDEX() { return (int)268435456L; }

    static final int FILE_INITIATE_REPAIR_HINT1_VALID_INDEX_ENTRY() { return (int)536870912L; }

    static final int FILE_INITIATE_REPAIR_HINT1_OUT_OF_GENERIC_NAMES() { return (int)1073741824L; }

    static final int FILE_INITIATE_REPAIR_HINT1_OUT_OF_RESOURCE() { return (int)2147483648L; }

    static final long FILE_INITIATE_REPAIR_HINT1_INVALID_LCN() { return 4294967296L; }

    static final long FILE_INITIATE_REPAIR_HINT1_INVALID_VCN() { return 8589934592L; }

    static final long FILE_INITIATE_REPAIR_HINT1_NAME_CONFLICT() { return 17179869184L; }

    static final long FILE_INITIATE_REPAIR_HINT1_ORPHAN() { return 34359738368L; }

    static final long FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_TOO_SMALL() { return 68719476736L; }

    static final long FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NON_RESIDENT() { return 137438953472L; }

    static final long FILE_INITIATE_REPAIR_HINT1_DENY_DEFRAG() { return 274877906944L; }

    static final long FILE_INITIATE_REPAIR_HINT1_PREVIOUS_PARENT_STILL_VALID() { return 549755813888L; }

    static final long FILE_INITIATE_REPAIR_HINT1_INDEX_ENTRY_MISMATCH() { return 1099511627776L; }

    static final long FILE_INITIATE_REPAIR_HINT1_INVALID_ORPHAN_RECOVERY_NAME() { return 2199023255552L; }

    static final long FILE_INITIATE_REPAIR_HINT1_MULTIPLE_FILE_NAME_ATTRIBUTES() { return 4398046511104L; }

    static final int TXFS_LOGGING_MODE_SIMPLE() { return (int)1L; }

    static final int TXFS_LOGGING_MODE_FULL() { return (int)2L; }

    static final int TXFS_MODIFY_RM_VALID_FLAGS() { return (int)261631L; }

    static final int TXFS_QUERY_RM_INFORMATION_VALID_FLAGS() { return (int)246192L; }

    static final int TXFS_ROLLFORWARD_REDO_VALID_FLAGS() { return (int)3L; }

    static final int TXFS_START_RM_VALID_FLAGS() { return (int)15999L; }

    static final int TXFS_TRANSACTED_VERSION_NONTRANSACTED() { return (int)4294967294L; }

    static final int TXFS_TRANSACTED_VERSION_UNCOMMITTED() { return (int)4294967295L; }

    static final int PERSISTENT_VOLUME_STATE_SHORT_NAME_CREATION_DISABLED() { return (int)1L; }

    static final int PERSISTENT_VOLUME_STATE_VOLUME_SCRUB_DISABLED() { return (int)2L; }

    static final int PERSISTENT_VOLUME_STATE_GLOBAL_METADATA_NO_SEEK_PENALTY() { return (int)4L; }

    static final int PERSISTENT_VOLUME_STATE_LOCAL_METADATA_NO_SEEK_PENALTY() { return (int)8L; }

    static final int PERSISTENT_VOLUME_STATE_NO_HEAT_GATHERING() { return (int)16L; }

    static final int PERSISTENT_VOLUME_STATE_CONTAINS_BACKING_WIM() { return (int)32L; }

    static final int PERSISTENT_VOLUME_STATE_BACKED_BY_WIM() { return (int)64L; }

    static final int PERSISTENT_VOLUME_STATE_NO_WRITE_AUTO_TIERING() { return (int)128L; }

    static final int PERSISTENT_VOLUME_STATE_TXF_DISABLED() { return (int)256L; }

    static final int PERSISTENT_VOLUME_STATE_REALLOCATE_ALL_DATA_WRITES() { return (int)512L; }

    static final int OPLOCK_LEVEL_CACHE_READ() { return (int)1L; }

    static final int OPLOCK_LEVEL_CACHE_HANDLE() { return (int)2L; }

    static final int OPLOCK_LEVEL_CACHE_WRITE() { return (int)4L; }

    static final int REQUEST_OPLOCK_INPUT_FLAG_REQUEST() { return (int)1L; }

    static final int REQUEST_OPLOCK_INPUT_FLAG_ACK() { return (int)2L; }

    static final int REQUEST_OPLOCK_INPUT_FLAG_COMPLETE_ACK_ON_CLOSE() { return (int)4L; }

    static final int REQUEST_OPLOCK_OUTPUT_FLAG_ACK_REQUIRED() { return (int)1L; }

    static final int REQUEST_OPLOCK_OUTPUT_FLAG_MODES_PROVIDED() { return (int)2L; }

    static final int SD_GLOBAL_CHANGE_TYPE_QUERY_STATS() { return (int)65536L; }

    static final int SD_GLOBAL_CHANGE_TYPE_ENUM_SDS() { return (int)131072L; }

    static final int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_MASK() { return (int)4278190080L; }

    static final long CSV_NAMESPACE_INFO_V1() { return 24L; }

    static final int CSV_INVALID_DEVICE_NUMBER() { return (int)4294967295L; }

    static final int QUERY_FILE_LAYOUT_RESTART() { return (int)1L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_NAMES() { return (int)2L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_STREAMS() { return (int)4L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_EXTENTS() { return (int)8L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_EXTRA_INFO() { return (int)16L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_STREAMS_WITH_NO_CLUSTERS_ALLOCATED() { return (int)32L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_FULL_PATH_IN_NAMES() { return (int)64L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION() { return (int)128L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_DSC_ATTRIBUTE() { return (int)256L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_TXF_ATTRIBUTE() { return (int)512L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_EFS_ATTRIBUTE() { return (int)1024L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_ONLY_FILES_WITH_SPECIFIC_ATTRIBUTES() { return (int)2048L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_FILES_WITH_DSC_ATTRIBUTE() { return (int)4096L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_DATA_ATTRIBUTE() { return (int)8192L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_REPARSE_ATTRIBUTE() { return (int)16384L; }

    static final int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_EA_ATTRIBUTE() { return (int)32768L; }

    static final int QUERY_FILE_LAYOUT_SINGLE_INSTANCED() { return (int)1L; }

    static final int FILE_LAYOUT_NAME_ENTRY_PRIMARY() { return (int)1L; }

    static final int FILE_LAYOUT_NAME_ENTRY_DOS() { return (int)2L; }

    static final int STREAM_LAYOUT_ENTRY_IMMOVABLE() { return (int)1L; }

    static final int STREAM_LAYOUT_ENTRY_PINNED() { return (int)2L; }

    static final int STREAM_LAYOUT_ENTRY_RESIDENT() { return (int)4L; }

    static final int STREAM_LAYOUT_ENTRY_NO_CLUSTERS_ALLOCATED() { return (int)8L; }

    static final int STREAM_LAYOUT_ENTRY_HAS_INFORMATION() { return (int)16L; }

    static final int STREAM_EXTENT_ENTRY_AS_RETRIEVAL_POINTERS() { return (int)1L; }

    static final int STREAM_EXTENT_ENTRY_ALL_EXTENTS() { return (int)2L; }

    static final int CHECKSUM_TYPE_UNCHANGED() { return (int)-1L; }

    static final int CHECKSUM_TYPE_NONE() { return (int)0L; }

    static final int CHECKSUM_TYPE_CRC32() { return (int)1L; }

    static final int CHECKSUM_TYPE_CRC64() { return (int)2L; }

    static final int CHECKSUM_TYPE_ECC() { return (int)3L; }

    static final int CHECKSUM_TYPE_FIRST_UNUSED_TYPE() { return (int)4L; }

    static final int FSCTL_INTEGRITY_FLAG_CHECKSUM_ENFORCEMENT_OFF() { return (int)1L; }

    static final int OFFLOAD_READ_FLAG_ALL_ZERO_BEYOND_CURRENT_RANGE() { return (int)1L; }

    static final int FILE_REGION_USAGE_QUERY_ALIGNMENT() { return (int)24L; }

    static final int VALID_WRITE_USN_REASON_MASK() { return (int)2147483649L; }

    static final int FILE_STORAGE_TIER_NAME_LENGTH() { return (int)256L; }

    static final int FILE_STORAGE_TIER_DESCRIPTION_LENGTH() { return (int)512L; }

    static final int FILE_STORAGE_TIER_FLAG_NO_SEEK_PENALTY() { return (int)131072L; }

    static final int FILE_STORAGE_TIER_FLAG_WRITE_BACK_CACHE() { return (int)2097152L; }

    static final int FILE_STORAGE_TIER_FLAG_READ_CACHE() { return (int)4194304L; }

    static final int FILE_STORAGE_TIER_FLAG_PARITY() { return (int)8388608L; }

    static final int FILE_STORAGE_TIER_FLAG_SMR() { return (int)16777216L; }

    static final int QUERY_STORAGE_CLASSES_FLAGS_MEASURE_WRITE() { return (int)2147483648L; }

    static final long FSCTL_QUERY_STORAGE_CLASSES_OUTPUT_VERSION() { return 1088L; }

    static final int QUERY_FILE_LAYOUT_REPARSE_DATA_INVALID() { return (int)1L; }

    static final int QUERY_FILE_LAYOUT_REPARSE_TAG_INVALID() { return (int)2L; }

    static final long FSCTL_QUERY_REGION_INFO_INPUT_VERSION() { return 32L; }

    static final long FSCTL_QUERY_REGION_INFO_OUTPUT_VERSION() { return 64L; }

    static final int STREAMS_INVALID_ID() { return (int)0L; }

    static final int STREAMS_MAX_ID() { return (int)65535L; }

    static final int STREAMS_ASSOCIATE_ID_CLEAR() { return (int)1L; }

    static final int STREAMS_ASSOCIATE_ID_SET() { return (int)2L; }

    static final int DAX_ALLOC_ALIGNMENT_FLAG_MANDATORY() { return (int)1L; }

    static final int DAX_ALLOC_ALIGNMENT_FLAG_FALLBACK_SPECIFIED() { return (int)2L; }

    static final int WOF_CURRENT_VERSION() { return (int)1L; }

    static final int WOF_PROVIDER_WIM() { return (int)1L; }

    static final int WOF_PROVIDER_FILE() { return (int)2L; }

    static final int WOF_PROVIDER_CLOUD() { return (int)3L; }

    static final int WIM_PROVIDER_CURRENT_VERSION() { return (int)1L; }

    static final int WIM_PROVIDER_EXTERNAL_FLAG_NOT_ACTIVE() { return (int)1L; }

    static final int WIM_PROVIDER_EXTERNAL_FLAG_SUSPENDED() { return (int)2L; }

    static final int WIM_BOOT_OS_WIM() { return (int)1L; }

    static final int WIM_BOOT_NOT_OS_WIM() { return (int)0L; }

    static final int FILE_PROVIDER_CURRENT_VERSION() { return (int)1L; }

    static final int FILE_PROVIDER_SINGLE_FILE() { return (int)1L; }

    static final int FILE_PROVIDER_COMPRESSION_XPRESS4K() { return (int)0L; }

    static final int FILE_PROVIDER_COMPRESSION_LZX() { return (int)1L; }

    static final int FILE_PROVIDER_COMPRESSION_XPRESS8K() { return (int)2L; }

    static final int FILE_PROVIDER_COMPRESSION_XPRESS16K() { return (int)3L; }

    static final int FILE_PROVIDER_COMPRESSION_MAXIMUM() { return (int)4L; }

    static final int FILE_PROVIDER_FLAG_COMPRESS_ON_WRITE() { return (int)1L; }

    static final int CONTAINER_VOLUME_STATE_HOSTING_CONTAINER() { return (int)1L; }

    static final int CONTAINER_ROOT_INFO_FLAG_SCRATCH_ROOT() { return (int)1L; }

    static final int CONTAINER_ROOT_INFO_FLAG_LAYER_ROOT() { return (int)2L; }

    static final int CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_ROOT() { return (int)4L; }

    static final int CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_TARGET_ROOT() { return (int)8L; }

    static final int CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_EXCEPTION_ROOT() { return (int)16L; }

    static final int CONTAINER_ROOT_INFO_FLAG_BIND_ROOT() { return (int)32L; }

    static final int CONTAINER_ROOT_INFO_FLAG_BIND_TARGET_ROOT() { return (int)64L; }

    static final int CONTAINER_ROOT_INFO_FLAG_BIND_EXCEPTION_ROOT() { return (int)128L; }

    static final int CONTAINER_ROOT_INFO_FLAG_BIND_DO_NOT_MAP_NAME() { return (int)256L; }

    static final int CONTAINER_ROOT_INFO_VALID_FLAGS() { return (int)511L; }

    static final int IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS() { return (int)5636096L; }

    static final int IOCTL_VOLUME_ONLINE() { return (int)5685256L; }

    static final int IOCTL_VOLUME_OFFLINE() { return (int)5685260L; }

    static final int IOCTL_VOLUME_IS_CLUSTERED() { return (int)5636144L; }

    static final int IOCTL_VOLUME_GET_GPT_ATTRIBUTES() { return (int)5636152L; }

    static final int IRP_EXT_TRACK_OFFSET_HEADER_VALIDATION_VALUE() { return (int)21583L; }

    static final int SCARD_PROTOCOL_Tx() { return (int)3L; }

    static final int SCARD_PROTOCOL_DEFAULT() { return (int)2147483648L; }

    static final int IOCTL_SMARTCARD_POWER() { return (int)3211268L; }

    static final int IOCTL_SMARTCARD_GET_ATTRIBUTE() { return (int)3211272L; }

    static final int IOCTL_SMARTCARD_SET_ATTRIBUTE() { return (int)3211276L; }

    static final int IOCTL_SMARTCARD_CONFISCATE() { return (int)3211280L; }

    static final int IOCTL_SMARTCARD_TRANSMIT() { return (int)3211284L; }

    static final int IOCTL_SMARTCARD_EJECT() { return (int)3211288L; }

    static final int IOCTL_SMARTCARD_SWALLOW() { return (int)3211292L; }

    static final int IOCTL_SMARTCARD_IS_PRESENT() { return (int)3211304L; }

    static final int IOCTL_SMARTCARD_IS_ABSENT() { return (int)3211308L; }

    static final int IOCTL_SMARTCARD_SET_PROTOCOL() { return (int)3211312L; }

    static final int IOCTL_SMARTCARD_GET_STATE() { return (int)3211320L; }

    static final int IOCTL_SMARTCARD_GET_LAST_ERROR() { return (int)3211324L; }

    static final int IOCTL_SMARTCARD_GET_PERF_CNTR() { return (int)3211328L; }

    static final int IOCTL_SMARTCARD_GET_FEATURE_REQUEST() { return (int)3224864L; }

    static final int SCARD_ATTR_VENDOR_NAME() { return (int)65792L; }

    static final int SCARD_ATTR_VENDOR_IFD_TYPE() { return (int)65793L; }

    static final int SCARD_ATTR_VENDOR_IFD_VERSION() { return (int)65794L; }

    static final int SCARD_ATTR_VENDOR_IFD_SERIAL_NO() { return (int)65795L; }

    static final int SCARD_ATTR_CHANNEL_ID() { return (int)131344L; }

    static final int SCARD_ATTR_PROTOCOL_TYPES() { return (int)196896L; }

    static final int SCARD_ATTR_DEFAULT_CLK() { return (int)196897L; }

    static final int SCARD_ATTR_MAX_CLK() { return (int)196898L; }

    static final int SCARD_ATTR_DEFAULT_DATA_RATE() { return (int)196899L; }

    static final int SCARD_ATTR_MAX_DATA_RATE() { return (int)196900L; }

    static final int SCARD_ATTR_MAX_IFSD() { return (int)196901L; }

    static final int SCARD_ATTR_POWER_MGMT_SUPPORT() { return (int)262449L; }

    static final int SCARD_ATTR_USER_TO_CARD_AUTH_DEVICE() { return (int)328000L; }

    static final int SCARD_ATTR_USER_AUTH_INPUT_DEVICE() { return (int)328002L; }

    static final int SCARD_ATTR_CHARACTERISTICS() { return (int)393552L; }

    static final int SCARD_ATTR_CURRENT_PROTOCOL_TYPE() { return (int)524801L; }

    static final int SCARD_ATTR_CURRENT_CLK() { return (int)524802L; }

    static final int SCARD_ATTR_CURRENT_F() { return (int)524803L; }

    static final int SCARD_ATTR_CURRENT_D() { return (int)524804L; }

    static final int SCARD_ATTR_CURRENT_N() { return (int)524805L; }

    static final int SCARD_ATTR_CURRENT_W() { return (int)524806L; }

    static final int SCARD_ATTR_CURRENT_IFSC() { return (int)524807L; }

    static final int SCARD_ATTR_CURRENT_IFSD() { return (int)524808L; }

    static final int SCARD_ATTR_CURRENT_BWT() { return (int)524809L; }

    static final int SCARD_ATTR_CURRENT_CWT() { return (int)524810L; }

    static final int SCARD_ATTR_CURRENT_EBC_ENCODING() { return (int)524811L; }

    static final int SCARD_ATTR_EXTENDED_BWT() { return (int)524812L; }

    static final int SCARD_ATTR_ICC_PRESENCE() { return (int)590592L; }

    static final int SCARD_ATTR_ICC_INTERFACE_STATUS() { return (int)590593L; }

    static final int SCARD_ATTR_CURRENT_IO_STATE() { return (int)590594L; }

    static final int SCARD_ATTR_ATR_STRING() { return (int)590595L; }

    static final int SCARD_ATTR_ICC_TYPE_PER_ATR() { return (int)590596L; }

    static final int SCARD_ATTR_ESC_RESET() { return (int)499712L; }

    static final int SCARD_ATTR_ESC_CANCEL() { return (int)499715L; }

    static final int SCARD_ATTR_ESC_AUTHREQUEST() { return (int)499717L; }

    static final int SCARD_ATTR_MAXINPUT() { return (int)499719L; }

    static final int SCARD_ATTR_VENDOR_SPECIFIC_INFO() { return (int)499720L; }

    static final int SCARD_ATTR_DEVICE_UNIT() { return (int)2147418113L; }

    static final int SCARD_ATTR_DEVICE_IN_USE() { return (int)2147418114L; }

    static final int SCARD_ATTR_DEVICE_FRIENDLY_NAME_A() { return (int)2147418115L; }

    static final int SCARD_ATTR_DEVICE_SYSTEM_NAME_A() { return (int)2147418116L; }

    static final int SCARD_ATTR_DEVICE_FRIENDLY_NAME_W() { return (int)2147418117L; }

    static final int SCARD_ATTR_DEVICE_SYSTEM_NAME_W() { return (int)2147418118L; }

    static final int SCARD_ATTR_SUPRESS_T1_IFS_REQUEST() { return (int)2147418119L; }

    static final int SCARD_PERF_NUM_TRANSMISSIONS() { return (int)2147352577L; }

    static final int SCARD_PERF_BYTES_TRANSMITTED() { return (int)2147352578L; }

    static final int SCARD_PERF_TRANSMISSION_TIME() { return (int)2147352579L; }

    static final int SCARD_ATTR_DEVICE_FRIENDLY_NAME() { return (int)2147418115L; }

    static final int SCARD_ATTR_DEVICE_SYSTEM_NAME() { return (int)2147418116L; }

    static final int SCARD_AUTOALLOCATE() { return (int)4294967295L; }

    static final MemorySegment SCARD_ALL_READERS$SEGMENT_CONSTANT_ = CLinker.toCString("SCard$AllReaders");
    static final jdk.incubator.foreign.MemorySegment SCARD_ALL_READERS() { return SCARD_ALL_READERS$SEGMENT_CONSTANT_; }

    static final MemorySegment SCARD_DEFAULT_READERS$SEGMENT_CONSTANT_ = CLinker.toCString("SCard$DefaultReaders");
    static final jdk.incubator.foreign.MemorySegment SCARD_DEFAULT_READERS() { return SCARD_DEFAULT_READERS$SEGMENT_CONSTANT_; }

    static final MemorySegment SCARD_LOCAL_READERS$SEGMENT_CONSTANT_ = CLinker.toCString("SCard$LocalReaders");
    static final jdk.incubator.foreign.MemorySegment SCARD_LOCAL_READERS() { return SCARD_LOCAL_READERS$SEGMENT_CONSTANT_; }

    static final MemorySegment SCARD_SYSTEM_READERS$SEGMENT_CONSTANT_ = CLinker.toCString("SCard$SystemReaders");
    static final jdk.incubator.foreign.MemorySegment SCARD_SYSTEM_READERS() { return SCARD_SYSTEM_READERS$SEGMENT_CONSTANT_; }

    static final int SCARD_READER_SEL_AUTH_PACKAGE() { return (int)4294966667L; }

    static final long PROPSHEETPAGEA_V1_SIZE() { return 72L; }

    static final long PROPSHEETPAGEW_V1_SIZE() { return 72L; }

    static final long PROPSHEETPAGEA_V2_SIZE() { return 88L; }

    static final long PROPSHEETPAGEW_V2_SIZE() { return 88L; }

    static final long PROPSHEETPAGEA_V3_SIZE() { return 96L; }

    static final long PROPSHEETPAGEW_V3_SIZE() { return 96L; }

    static final long PROPSHEETPAGEA_V4_SIZE() { return 104L; }

    static final long PROPSHEETPAGEW_V4_SIZE() { return 104L; }

    static final long PROPSHEETPAGE_V1_SIZE() { return 72L; }

    static final long PROPSHEETPAGE_V2_SIZE() { return 88L; }

    static final long PROPSHEETHEADERA_V1_SIZE() { return 72L; }

    static final long PROPSHEETHEADERW_V1_SIZE() { return 72L; }

    static final long PROPSHEETHEADERA_V2_SIZE() { return 96L; }

    static final long PROPSHEETHEADERW_V2_SIZE() { return 96L; }

    static final long PROPSHEETHEADER_V1_SIZE() { return 72L; }

    static final long PROPSHEETHEADER_V2_SIZE() { return 96L; }

    static final int PSN_FIRST() { return (int)4294967096L; }

    static final int PSN_LAST() { return (int)4294966997L; }

    static final int PSN_SETACTIVE() { return (int)4294967096L; }

    static final int PSN_KILLACTIVE() { return (int)4294967095L; }

    static final int PSN_APPLY() { return (int)4294967094L; }

    static final int PSN_RESET() { return (int)4294967093L; }

    static final int PSN_HELP() { return (int)4294967091L; }

    static final int PSN_WIZBACK() { return (int)4294967090L; }

    static final int PSN_WIZNEXT() { return (int)4294967089L; }

    static final int PSN_WIZFINISH() { return (int)4294967088L; }

    static final int PSN_QUERYCANCEL() { return (int)4294967087L; }

    static final int PSN_GETOBJECT() { return (int)4294967086L; }

    static final int PSN_TRANSLATEACCELERATOR() { return (int)4294967084L; }

    static final int PSN_QUERYINITIALFOCUS() { return (int)4294967083L; }

    static final int PSM_SETCURSEL() { return (int)1125L; }

    static final int PSM_REMOVEPAGE() { return (int)1126L; }

    static final int PSM_ADDPAGE() { return (int)1127L; }

    static final int PSM_CHANGED() { return (int)1128L; }

    static final int PSM_RESTARTWINDOWS() { return (int)1129L; }

    static final int PSM_REBOOTSYSTEM() { return (int)1130L; }

    static final int PSM_CANCELTOCLOSE() { return (int)1131L; }

    static final int PSM_QUERYSIBLINGS() { return (int)1132L; }

    static final int PSM_UNCHANGED() { return (int)1133L; }

    static final int PSM_APPLY() { return (int)1134L; }

    static final int PSM_SETTITLEA() { return (int)1135L; }

    static final int PSM_SETTITLEW() { return (int)1144L; }

    static final int PSM_SETTITLE() { return (int)1135L; }

    static final int PSM_SETWIZBUTTONS() { return (int)1136L; }

    static final int PSM_PRESSBUTTON() { return (int)1137L; }

    static final int PSM_SETCURSELID() { return (int)1138L; }

    static final int PSM_SETFINISHTEXTA() { return (int)1139L; }

    static final int PSM_SETFINISHTEXTW() { return (int)1145L; }

    static final int PSM_SETFINISHTEXT() { return (int)1139L; }

    static final int PSM_GETTABCONTROL() { return (int)1140L; }

    static final int PSM_ISDIALOGMESSAGE() { return (int)1141L; }

    static final int PSM_GETCURRENTPAGEHWND() { return (int)1142L; }

    static final int PSM_INSERTPAGE() { return (int)1143L; }

    static final int PSWIZF_SETCOLOR() { return (int)4294967295L; }

    static final int PSM_SETHEADERTITLEA() { return (int)1149L; }

    static final int PSM_SETHEADERTITLEW() { return (int)1150L; }

    static final int PSM_SETHEADERTITLE() { return (int)1149L; }

    static final int PSM_SETHEADERSUBTITLEA() { return (int)1151L; }

    static final int PSM_SETHEADERSUBTITLEW() { return (int)1152L; }

    static final int PSM_SETHEADERSUBTITLE() { return (int)1151L; }

    static final int PSM_HWNDTOINDEX() { return (int)1153L; }

    static final int PSM_INDEXTOHWND() { return (int)1154L; }

    static final int PSM_PAGETOINDEX() { return (int)1155L; }

    static final int PSM_INDEXTOPAGE() { return (int)1156L; }

    static final int PSM_IDTOINDEX() { return (int)1157L; }

    static final int PSM_INDEXTOID() { return (int)1158L; }

    static final int PSM_GETRESULT() { return (int)1159L; }

    static final int PSM_RECALCPAGESIZES() { return (int)1160L; }

    static final int PSM_SETNEXTTEXTW() { return (int)1161L; }

    static final int PSM_SETNEXTTEXT() { return (int)1161L; }

    static final int PSM_SHOWWIZBUTTONS() { return (int)1162L; }

    static final int PSM_ENABLEWIZBUTTONS() { return (int)1163L; }

    static final int PSM_SETBUTTONTEXTW() { return (int)1164L; }

    static final int PSM_SETBUTTONTEXT() { return (int)1164L; }

    static final int ID_PSREBOOTSYSTEM() { return (int)3L; }

    static final int DSPRINT_PENDING() { return (int)2147483648L; }

    static final int MAX_FORM_KEYWORD_LENGTH() { return (int)64L; }

    static final int NORMAL_PRINT() { return (int)0L; }

    static final int REVERSE_PRINT() { return (int)1L; }

    static final int PPCAPS_RIGHT_THEN_DOWN() { return (int)1L; }

    static final int PPCAPS_DOWN_THEN_RIGHT() { return (int)2L; }

    static final int PPCAPS_LEFT_THEN_DOWN() { return (int)4L; }

    static final int PPCAPS_DOWN_THEN_LEFT() { return (int)8L; }

    static final int PPCAPS_BORDER_PRINT() { return (int)1L; }

    static final int PPCAPS_BOOKLET_EDGE() { return (int)1L; }

    static final int PPCAPS_REVERSE_PAGES_FOR_REVERSE_DUPLEX() { return (int)1L; }

    static final int PPCAPS_DONT_SEND_EXTRA_PAGES_FOR_DUPLEX() { return (int)2L; }

    static final int PPCAPS_SQUARE_SCALING() { return (int)1L; }

    static final MemorySegment BIDI_ACTION_ENUM_SCHEMA$SEGMENT_CONSTANT_ = CLinker.toCString("E");
    static final jdk.incubator.foreign.MemorySegment BIDI_ACTION_ENUM_SCHEMA() { return BIDI_ACTION_ENUM_SCHEMA$SEGMENT_CONSTANT_; }

    static final MemorySegment BIDI_ACTION_GET$SEGMENT_CONSTANT_ = CLinker.toCString("G");
    static final jdk.incubator.foreign.MemorySegment BIDI_ACTION_GET() { return BIDI_ACTION_GET$SEGMENT_CONSTANT_; }

    static final MemorySegment BIDI_ACTION_SET$SEGMENT_CONSTANT_ = CLinker.toCString("S");
    static final jdk.incubator.foreign.MemorySegment BIDI_ACTION_SET() { return BIDI_ACTION_SET$SEGMENT_CONSTANT_; }

    static final MemorySegment BIDI_ACTION_GET_ALL$SEGMENT_CONSTANT_ = CLinker.toCString("G");
    static final jdk.incubator.foreign.MemorySegment BIDI_ACTION_GET_ALL() { return BIDI_ACTION_GET_ALL$SEGMENT_CONSTANT_; }

    static final MemorySegment BIDI_ACTION_GET_WITH_ARGUMENT$SEGMENT_CONSTANT_ = CLinker.toCString("G");
    static final jdk.incubator.foreign.MemorySegment BIDI_ACTION_GET_WITH_ARGUMENT() { return BIDI_ACTION_GET_WITH_ARGUMENT$SEGMENT_CONSTANT_; }

    static final int ERROR_BIDI_NOT_SUPPORTED() { return (int)50L; }

    static final int ERROR_BIDI_STATUS_WARNING() { return (int)13001L; }

    static final int ERROR_BIDI_SCHEMA_READ_ONLY() { return (int)13002L; }

    static final int ERROR_BIDI_SERVER_OFFLINE() { return (int)13003L; }

    static final int ERROR_BIDI_DEVICE_OFFLINE() { return (int)13004L; }

    static final int ERROR_BIDI_SCHEMA_NOT_SUPPORTED() { return (int)13005L; }

    static final int ERROR_BIDI_SET_DIFFERENT_TYPE() { return (int)13006L; }

    static final int ERROR_BIDI_SET_MULTIPLE_SCHEMAPATH() { return (int)13007L; }

    static final int ERROR_BIDI_SET_INVALID_SCHEMAPATH() { return (int)13008L; }

    static final int ERROR_BIDI_SET_UNKNOWN_FAILURE() { return (int)13009L; }

    static final int ERROR_BIDI_SCHEMA_WRITE_ONLY() { return (int)13010L; }

    static final int ERROR_BIDI_GET_REQUIRES_ARGUMENT() { return (int)13011L; }

    static final int ERROR_BIDI_GET_ARGUMENT_NOT_SUPPORTED() { return (int)13012L; }

    static final int ERROR_BIDI_GET_MISSING_ARGUMENT() { return (int)13013L; }

    static final int ERROR_BIDI_DEVICE_CONFIG_UNCHANGED() { return (int)13014L; }

    static final int ERROR_BIDI_NO_LOCALIZED_RESOURCES() { return (int)13015L; }

    static final int ERROR_BIDI_NO_BIDI_SCHEMA_EXTENSIONS() { return (int)13016L; }

    static final int ERROR_BIDI_UNSUPPORTED_CLIENT_LANGUAGE() { return (int)13017L; }

    static final int ERROR_BIDI_UNSUPPORTED_RESOURCE_FORMAT() { return (int)13018L; }

    static final int PRINTER_CHANGE_TIMEOUT() { return (int)2147483648L; }

    static final int PRINTER_ERROR_INFORMATION() { return (int)2147483648L; }

    static final MemorySegment SPLREG_DEFAULT_SPOOL_DIRECTORY$SEGMENT_CONSTANT_ = CLinker.toCString("DefaultSpoolDirectory");
    static final jdk.incubator.foreign.MemorySegment SPLREG_DEFAULT_SPOOL_DIRECTORY() { return SPLREG_DEFAULT_SPOOL_DIRECTORY$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_PORT_THREAD_PRIORITY_DEFAULT$SEGMENT_CONSTANT_ = CLinker.toCString("PortThreadPriorityDefault");
    static final jdk.incubator.foreign.MemorySegment SPLREG_PORT_THREAD_PRIORITY_DEFAULT() { return SPLREG_PORT_THREAD_PRIORITY_DEFAULT$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_PORT_THREAD_PRIORITY$SEGMENT_CONSTANT_ = CLinker.toCString("PortThreadPriority");
    static final jdk.incubator.foreign.MemorySegment SPLREG_PORT_THREAD_PRIORITY() { return SPLREG_PORT_THREAD_PRIORITY$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_SCHEDULER_THREAD_PRIORITY_DEFAULT$SEGMENT_CONSTANT_ = CLinker.toCString("SchedulerThreadPriorityDefault");
    static final jdk.incubator.foreign.MemorySegment SPLREG_SCHEDULER_THREAD_PRIORITY_DEFAULT() { return SPLREG_SCHEDULER_THREAD_PRIORITY_DEFAULT$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_SCHEDULER_THREAD_PRIORITY$SEGMENT_CONSTANT_ = CLinker.toCString("SchedulerThreadPriority");
    static final jdk.incubator.foreign.MemorySegment SPLREG_SCHEDULER_THREAD_PRIORITY() { return SPLREG_SCHEDULER_THREAD_PRIORITY$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_BEEP_ENABLED$SEGMENT_CONSTANT_ = CLinker.toCString("BeepEnabled");
    static final jdk.incubator.foreign.MemorySegment SPLREG_BEEP_ENABLED() { return SPLREG_BEEP_ENABLED$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_NET_POPUP$SEGMENT_CONSTANT_ = CLinker.toCString("NetPopup");
    static final jdk.incubator.foreign.MemorySegment SPLREG_NET_POPUP() { return SPLREG_NET_POPUP$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_RETRY_POPUP$SEGMENT_CONSTANT_ = CLinker.toCString("RetryPopup");
    static final jdk.incubator.foreign.MemorySegment SPLREG_RETRY_POPUP() { return SPLREG_RETRY_POPUP$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_NET_POPUP_TO_COMPUTER$SEGMENT_CONSTANT_ = CLinker.toCString("NetPopupToComputer");
    static final jdk.incubator.foreign.MemorySegment SPLREG_NET_POPUP_TO_COMPUTER() { return SPLREG_NET_POPUP_TO_COMPUTER$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_EVENT_LOG$SEGMENT_CONSTANT_ = CLinker.toCString("EventLog");
    static final jdk.incubator.foreign.MemorySegment SPLREG_EVENT_LOG() { return SPLREG_EVENT_LOG$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_MAJOR_VERSION$SEGMENT_CONSTANT_ = CLinker.toCString("MajorVersion");
    static final jdk.incubator.foreign.MemorySegment SPLREG_MAJOR_VERSION() { return SPLREG_MAJOR_VERSION$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_MINOR_VERSION$SEGMENT_CONSTANT_ = CLinker.toCString("MinorVersion");
    static final jdk.incubator.foreign.MemorySegment SPLREG_MINOR_VERSION() { return SPLREG_MINOR_VERSION$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_ARCHITECTURE$SEGMENT_CONSTANT_ = CLinker.toCString("Architecture");
    static final jdk.incubator.foreign.MemorySegment SPLREG_ARCHITECTURE() { return SPLREG_ARCHITECTURE$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_OS_VERSION$SEGMENT_CONSTANT_ = CLinker.toCString("OSVersion");
    static final jdk.incubator.foreign.MemorySegment SPLREG_OS_VERSION() { return SPLREG_OS_VERSION$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_OS_VERSIONEX$SEGMENT_CONSTANT_ = CLinker.toCString("OSVersionEx");
    static final jdk.incubator.foreign.MemorySegment SPLREG_OS_VERSIONEX() { return SPLREG_OS_VERSIONEX$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_DS_PRESENT$SEGMENT_CONSTANT_ = CLinker.toCString("DsPresent");
    static final jdk.incubator.foreign.MemorySegment SPLREG_DS_PRESENT() { return SPLREG_DS_PRESENT$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_DS_PRESENT_FOR_USER$SEGMENT_CONSTANT_ = CLinker.toCString("DsPresentForUser");
    static final jdk.incubator.foreign.MemorySegment SPLREG_DS_PRESENT_FOR_USER() { return SPLREG_DS_PRESENT_FOR_USER$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_REMOTE_FAX$SEGMENT_CONSTANT_ = CLinker.toCString("RemoteFax");
    static final jdk.incubator.foreign.MemorySegment SPLREG_REMOTE_FAX() { return SPLREG_REMOTE_FAX$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_RESTART_JOB_ON_POOL_ERROR$SEGMENT_CONSTANT_ = CLinker.toCString("RestartJobOnPoolError");
    static final jdk.incubator.foreign.MemorySegment SPLREG_RESTART_JOB_ON_POOL_ERROR() { return SPLREG_RESTART_JOB_ON_POOL_ERROR$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_RESTART_JOB_ON_POOL_ENABLED$SEGMENT_CONSTANT_ = CLinker.toCString("RestartJobOnPoolEnabled");
    static final jdk.incubator.foreign.MemorySegment SPLREG_RESTART_JOB_ON_POOL_ENABLED() { return SPLREG_RESTART_JOB_ON_POOL_ENABLED$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_DNS_MACHINE_NAME$SEGMENT_CONSTANT_ = CLinker.toCString("DNSMachineName");
    static final jdk.incubator.foreign.MemorySegment SPLREG_DNS_MACHINE_NAME() { return SPLREG_DNS_MACHINE_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_ALLOW_USER_MANAGEFORMS$SEGMENT_CONSTANT_ = CLinker.toCString("AllowUserManageForms");
    static final jdk.incubator.foreign.MemorySegment SPLREG_ALLOW_USER_MANAGEFORMS() { return SPLREG_ALLOW_USER_MANAGEFORMS$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_WEBSHAREMGMT$SEGMENT_CONSTANT_ = CLinker.toCString("WebShareMgmt");
    static final jdk.incubator.foreign.MemorySegment SPLREG_WEBSHAREMGMT() { return SPLREG_WEBSHAREMGMT$SEGMENT_CONSTANT_; }

    static final short SPLREG_PRINT_DRIVER_ISOLATION_GROUPS_SEPARATOR() { return (short)92L; }

    static final MemorySegment SPLREG_PRINT_DRIVER_ISOLATION_GROUPS$SEGMENT_CONSTANT_ = CLinker.toCString("PrintDriverIsolationGroups");
    static final jdk.incubator.foreign.MemorySegment SPLREG_PRINT_DRIVER_ISOLATION_GROUPS() { return SPLREG_PRINT_DRIVER_ISOLATION_GROUPS$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_PRINT_DRIVER_ISOLATION_TIME_BEFORE_RECYCLE$SEGMENT_CONSTANT_ = CLinker.toCString("PrintDriverIsolationTimeBeforeRecycle");
    static final jdk.incubator.foreign.MemorySegment SPLREG_PRINT_DRIVER_ISOLATION_TIME_BEFORE_RECYCLE() { return SPLREG_PRINT_DRIVER_ISOLATION_TIME_BEFORE_RECYCLE$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_PRINT_DRIVER_ISOLATION_MAX_OBJECTS_BEFORE_RECYCLE$SEGMENT_CONSTANT_ = CLinker.toCString("PrintDriverIsolationMaxobjsBeforeRecycle");
    static final jdk.incubator.foreign.MemorySegment SPLREG_PRINT_DRIVER_ISOLATION_MAX_OBJECTS_BEFORE_RECYCLE() { return SPLREG_PRINT_DRIVER_ISOLATION_MAX_OBJECTS_BEFORE_RECYCLE$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_PRINT_DRIVER_ISOLATION_IDLE_TIMEOUT$SEGMENT_CONSTANT_ = CLinker.toCString("PrintDriverIsolationIdleTimeout");
    static final jdk.incubator.foreign.MemorySegment SPLREG_PRINT_DRIVER_ISOLATION_IDLE_TIMEOUT() { return SPLREG_PRINT_DRIVER_ISOLATION_IDLE_TIMEOUT$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_PRINT_DRIVER_ISOLATION_EXECUTION_POLICY$SEGMENT_CONSTANT_ = CLinker.toCString("PrintDriverIsolationExecutionPolicy");
    static final jdk.incubator.foreign.MemorySegment SPLREG_PRINT_DRIVER_ISOLATION_EXECUTION_POLICY() { return SPLREG_PRINT_DRIVER_ISOLATION_EXECUTION_POLICY$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_PRINT_DRIVER_ISOLATION_OVERRIDE_POLICY$SEGMENT_CONSTANT_ = CLinker.toCString("PrintDriverIsolationOverrideCompat");
    static final jdk.incubator.foreign.MemorySegment SPLREG_PRINT_DRIVER_ISOLATION_OVERRIDE_POLICY() { return SPLREG_PRINT_DRIVER_ISOLATION_OVERRIDE_POLICY$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLREG_PRINT_QUEUE_V4_DRIVER_DIRECTORY$SEGMENT_CONSTANT_ = CLinker.toCString("PrintQueueV4DriverDirectory");
    static final jdk.incubator.foreign.MemorySegment SPLREG_PRINT_QUEUE_V4_DRIVER_DIRECTORY() { return SPLREG_PRINT_QUEUE_V4_DRIVER_DIRECTORY$SEGMENT_CONSTANT_; }

    static final int SERVER_ALL_ACCESS() { return (int)983043L; }

    static final int SERVER_READ() { return (int)131074L; }

    static final int SERVER_WRITE() { return (int)131075L; }

    static final int SERVER_EXECUTE() { return (int)131074L; }

    static final int PRINTER_ALL_ACCESS() { return (int)983052L; }

    static final int PRINTER_READ() { return (int)131080L; }

    static final int PRINTER_WRITE() { return (int)131080L; }

    static final int PRINTER_EXECUTE() { return (int)131080L; }

    static final int JOB_ALL_ACCESS() { return (int)983088L; }

    static final int JOB_READ() { return (int)131104L; }

    static final int JOB_WRITE() { return (int)131088L; }

    static final int JOB_EXECUTE() { return (int)131088L; }

    static final MemorySegment SPLDS_SPOOLER_KEY$SEGMENT_CONSTANT_ = CLinker.toCString("DsSpooler");
    static final jdk.incubator.foreign.MemorySegment SPLDS_SPOOLER_KEY() { return SPLDS_SPOOLER_KEY$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_DRIVER_KEY$SEGMENT_CONSTANT_ = CLinker.toCString("DsDriver");
    static final jdk.incubator.foreign.MemorySegment SPLDS_DRIVER_KEY() { return SPLDS_DRIVER_KEY$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_USER_KEY$SEGMENT_CONSTANT_ = CLinker.toCString("DsUser");
    static final jdk.incubator.foreign.MemorySegment SPLDS_USER_KEY() { return SPLDS_USER_KEY$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_ASSET_NUMBER$SEGMENT_CONSTANT_ = CLinker.toCString("assetNumber");
    static final jdk.incubator.foreign.MemorySegment SPLDS_ASSET_NUMBER() { return SPLDS_ASSET_NUMBER$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_BYTES_PER_MINUTE$SEGMENT_CONSTANT_ = CLinker.toCString("bytesPerMinute");
    static final jdk.incubator.foreign.MemorySegment SPLDS_BYTES_PER_MINUTE() { return SPLDS_BYTES_PER_MINUTE$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_DESCRIPTION$SEGMENT_CONSTANT_ = CLinker.toCString("description");
    static final jdk.incubator.foreign.MemorySegment SPLDS_DESCRIPTION() { return SPLDS_DESCRIPTION$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_DRIVER_NAME$SEGMENT_CONSTANT_ = CLinker.toCString("driverName");
    static final jdk.incubator.foreign.MemorySegment SPLDS_DRIVER_NAME() { return SPLDS_DRIVER_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_DRIVER_VERSION$SEGMENT_CONSTANT_ = CLinker.toCString("driverVersion");
    static final jdk.incubator.foreign.MemorySegment SPLDS_DRIVER_VERSION() { return SPLDS_DRIVER_VERSION$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_LOCATION$SEGMENT_CONSTANT_ = CLinker.toCString("location");
    static final jdk.incubator.foreign.MemorySegment SPLDS_LOCATION() { return SPLDS_LOCATION$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PORT_NAME$SEGMENT_CONSTANT_ = CLinker.toCString("portName");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PORT_NAME() { return SPLDS_PORT_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_ATTRIBUTES$SEGMENT_CONSTANT_ = CLinker.toCString("printAttributes");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_ATTRIBUTES() { return SPLDS_PRINT_ATTRIBUTES$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_BIN_NAMES$SEGMENT_CONSTANT_ = CLinker.toCString("printBinNames");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_BIN_NAMES() { return SPLDS_PRINT_BIN_NAMES$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_COLLATE$SEGMENT_CONSTANT_ = CLinker.toCString("printCollate");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_COLLATE() { return SPLDS_PRINT_COLLATE$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_COLOR$SEGMENT_CONSTANT_ = CLinker.toCString("printColor");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_COLOR() { return SPLDS_PRINT_COLOR$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_DUPLEX_SUPPORTED$SEGMENT_CONSTANT_ = CLinker.toCString("printDuplexSupported");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_DUPLEX_SUPPORTED() { return SPLDS_PRINT_DUPLEX_SUPPORTED$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_END_TIME$SEGMENT_CONSTANT_ = CLinker.toCString("printEndTime");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_END_TIME() { return SPLDS_PRINT_END_TIME$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINTER_CLASS$SEGMENT_CONSTANT_ = CLinker.toCString("printQueue");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINTER_CLASS() { return SPLDS_PRINTER_CLASS$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINTER_NAME$SEGMENT_CONSTANT_ = CLinker.toCString("printerName");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINTER_NAME() { return SPLDS_PRINTER_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_KEEP_PRINTED_JOBS$SEGMENT_CONSTANT_ = CLinker.toCString("printKeepPrintedJobs");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_KEEP_PRINTED_JOBS() { return SPLDS_PRINT_KEEP_PRINTED_JOBS$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_LANGUAGE$SEGMENT_CONSTANT_ = CLinker.toCString("printLanguage");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_LANGUAGE() { return SPLDS_PRINT_LANGUAGE$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_MAC_ADDRESS$SEGMENT_CONSTANT_ = CLinker.toCString("printMACAddress");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_MAC_ADDRESS() { return SPLDS_PRINT_MAC_ADDRESS$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_MAX_X_EXTENT$SEGMENT_CONSTANT_ = CLinker.toCString("printMaxXExtent");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_MAX_X_EXTENT() { return SPLDS_PRINT_MAX_X_EXTENT$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_MAX_Y_EXTENT$SEGMENT_CONSTANT_ = CLinker.toCString("printMaxYExtent");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_MAX_Y_EXTENT() { return SPLDS_PRINT_MAX_Y_EXTENT$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_MAX_RESOLUTION_SUPPORTED$SEGMENT_CONSTANT_ = CLinker.toCString("printMaxResolutionSupported");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_MAX_RESOLUTION_SUPPORTED() { return SPLDS_PRINT_MAX_RESOLUTION_SUPPORTED$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_MEDIA_READY$SEGMENT_CONSTANT_ = CLinker.toCString("printMediaReady");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_MEDIA_READY() { return SPLDS_PRINT_MEDIA_READY$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_MEDIA_SUPPORTED$SEGMENT_CONSTANT_ = CLinker.toCString("printMediaSupported");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_MEDIA_SUPPORTED() { return SPLDS_PRINT_MEDIA_SUPPORTED$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_MEMORY$SEGMENT_CONSTANT_ = CLinker.toCString("printMemory");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_MEMORY() { return SPLDS_PRINT_MEMORY$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_MIN_X_EXTENT$SEGMENT_CONSTANT_ = CLinker.toCString("printMinXExtent");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_MIN_X_EXTENT() { return SPLDS_PRINT_MIN_X_EXTENT$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_MIN_Y_EXTENT$SEGMENT_CONSTANT_ = CLinker.toCString("printMinYExtent");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_MIN_Y_EXTENT() { return SPLDS_PRINT_MIN_Y_EXTENT$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_NETWORK_ADDRESS$SEGMENT_CONSTANT_ = CLinker.toCString("printNetworkAddress");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_NETWORK_ADDRESS() { return SPLDS_PRINT_NETWORK_ADDRESS$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_NOTIFY$SEGMENT_CONSTANT_ = CLinker.toCString("printNotify");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_NOTIFY() { return SPLDS_PRINT_NOTIFY$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_NUMBER_UP$SEGMENT_CONSTANT_ = CLinker.toCString("printNumberUp");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_NUMBER_UP() { return SPLDS_PRINT_NUMBER_UP$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_ORIENTATIONS_SUPPORTED$SEGMENT_CONSTANT_ = CLinker.toCString("printOrientationsSupported");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_ORIENTATIONS_SUPPORTED() { return SPLDS_PRINT_ORIENTATIONS_SUPPORTED$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_OWNER$SEGMENT_CONSTANT_ = CLinker.toCString("printOwner");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_OWNER() { return SPLDS_PRINT_OWNER$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_PAGES_PER_MINUTE$SEGMENT_CONSTANT_ = CLinker.toCString("printPagesPerMinute");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_PAGES_PER_MINUTE() { return SPLDS_PRINT_PAGES_PER_MINUTE$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_RATE$SEGMENT_CONSTANT_ = CLinker.toCString("printRate");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_RATE() { return SPLDS_PRINT_RATE$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_RATE_UNIT$SEGMENT_CONSTANT_ = CLinker.toCString("printRateUnit");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_RATE_UNIT() { return SPLDS_PRINT_RATE_UNIT$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_SEPARATOR_FILE$SEGMENT_CONSTANT_ = CLinker.toCString("printSeparatorFile");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_SEPARATOR_FILE() { return SPLDS_PRINT_SEPARATOR_FILE$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_SHARE_NAME$SEGMENT_CONSTANT_ = CLinker.toCString("printShareName");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_SHARE_NAME() { return SPLDS_PRINT_SHARE_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_SPOOLING$SEGMENT_CONSTANT_ = CLinker.toCString("printSpooling");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_SPOOLING() { return SPLDS_PRINT_SPOOLING$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_STAPLING_SUPPORTED$SEGMENT_CONSTANT_ = CLinker.toCString("printStaplingSupported");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_STAPLING_SUPPORTED() { return SPLDS_PRINT_STAPLING_SUPPORTED$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_START_TIME$SEGMENT_CONSTANT_ = CLinker.toCString("printStartTime");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_START_TIME() { return SPLDS_PRINT_START_TIME$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINT_STATUS$SEGMENT_CONSTANT_ = CLinker.toCString("printStatus");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINT_STATUS() { return SPLDS_PRINT_STATUS$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRIORITY$SEGMENT_CONSTANT_ = CLinker.toCString("priority");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRIORITY() { return SPLDS_PRIORITY$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_SERVER_NAME$SEGMENT_CONSTANT_ = CLinker.toCString("serverName");
    static final jdk.incubator.foreign.MemorySegment SPLDS_SERVER_NAME() { return SPLDS_SERVER_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_SHORT_SERVER_NAME$SEGMENT_CONSTANT_ = CLinker.toCString("shortServerName");
    static final jdk.incubator.foreign.MemorySegment SPLDS_SHORT_SERVER_NAME() { return SPLDS_SHORT_SERVER_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_UNC_NAME$SEGMENT_CONSTANT_ = CLinker.toCString("uNCName");
    static final jdk.incubator.foreign.MemorySegment SPLDS_UNC_NAME() { return SPLDS_UNC_NAME$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_URL$SEGMENT_CONSTANT_ = CLinker.toCString("url");
    static final jdk.incubator.foreign.MemorySegment SPLDS_URL() { return SPLDS_URL$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_FLAGS$SEGMENT_CONSTANT_ = CLinker.toCString("flags");
    static final jdk.incubator.foreign.MemorySegment SPLDS_FLAGS() { return SPLDS_FLAGS$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_VERSION_NUMBER$SEGMENT_CONSTANT_ = CLinker.toCString("versionNumber");
    static final jdk.incubator.foreign.MemorySegment SPLDS_VERSION_NUMBER() { return SPLDS_VERSION_NUMBER$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINTER_NAME_ALIASES$SEGMENT_CONSTANT_ = CLinker.toCString("printerNameAliases");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINTER_NAME_ALIASES() { return SPLDS_PRINTER_NAME_ALIASES$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINTER_LOCATIONS$SEGMENT_CONSTANT_ = CLinker.toCString("printerLocations");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINTER_LOCATIONS() { return SPLDS_PRINTER_LOCATIONS$SEGMENT_CONSTANT_; }

    static final MemorySegment SPLDS_PRINTER_MODEL$SEGMENT_CONSTANT_ = CLinker.toCString("printerModel");
    static final jdk.incubator.foreign.MemorySegment SPLDS_PRINTER_MODEL() { return SPLDS_PRINTER_MODEL$SEGMENT_CONSTANT_; }

    static final MemorySegment MS_PRINT_JOB_OUTPUT_FILE$SEGMENT_CONSTANT_ = CLinker.toCString("M");
    static final jdk.incubator.foreign.MemorySegment MS_PRINT_JOB_OUTPUT_FILE() { return MS_PRINT_JOB_OUTPUT_FILE$SEGMENT_CONSTANT_; }

    static final int _MAX_ITOSTR_BASE16_COUNT() { return (int)9L; }

    static final int _MAX_ITOSTR_BASE10_COUNT() { return (int)12L; }

    static final int _MAX_ITOSTR_BASE8_COUNT() { return (int)12L; }

    static final int _MAX_ITOSTR_BASE2_COUNT() { return (int)33L; }

    static final int _MAX_LTOSTR_BASE16_COUNT() { return (int)9L; }

    static final int _MAX_LTOSTR_BASE10_COUNT() { return (int)12L; }

    static final int _MAX_LTOSTR_BASE8_COUNT() { return (int)12L; }

    static final int _MAX_LTOSTR_BASE2_COUNT() { return (int)33L; }

    static final int _MAX_ULTOSTR_BASE16_COUNT() { return (int)9L; }

    static final int _MAX_ULTOSTR_BASE10_COUNT() { return (int)11L; }

    static final int _MAX_ULTOSTR_BASE8_COUNT() { return (int)12L; }

    static final int _MAX_ULTOSTR_BASE2_COUNT() { return (int)33L; }

    static final int _MAX_I64TOSTR_BASE16_COUNT() { return (int)17L; }

    static final int _MAX_I64TOSTR_BASE10_COUNT() { return (int)21L; }

    static final int _MAX_I64TOSTR_BASE8_COUNT() { return (int)23L; }

    static final int _MAX_I64TOSTR_BASE2_COUNT() { return (int)65L; }

    static final int _MAX_U64TOSTR_BASE16_COUNT() { return (int)17L; }

    static final int _MAX_U64TOSTR_BASE10_COUNT() { return (int)21L; }

    static final int _MAX_U64TOSTR_BASE8_COUNT() { return (int)23L; }

    static final int _MAX_U64TOSTR_BASE2_COUNT() { return (int)65L; }

    static final int SCHAR_MIN() { return (int)-128L; }

    static final int CHAR_MIN() { return (int)-128L; }

    static final int CHAR_MAX() { return (int)127L; }

    static final int SHRT_MIN() { return (int)-32768L; }

    static final int INT_MIN() { return (int)-2147483648L; }

    static final int UINT_MAX() { return (int)4294967295L; }

    static final int LONG_MIN() { return (int)-2147483648L; }

    static final int LONG_MAX() { return (int)2147483647L; }

    static final int ULONG_MAX() { return (int)4294967295L; }

    static final long LLONG_MAX() { return 9223372036854775807L; }

    static final long LLONG_MIN() { return -9223372036854775808L; }

    static final long ULLONG_MAX() { return -1L; }

    static final int _I8_MIN() { return (int)-128L; }

    static final byte _I8_MAX() { return (byte)127L; }

    static final byte _UI8_MAX() { return (byte)255L; }

    static final int _I16_MIN() { return (int)-32768L; }

    static final short _I16_MAX() { return (short)32767L; }

    static final short _UI16_MAX() { return (short)65535L; }

    static final int _I32_MIN() { return (int)-2147483648L; }

    static final int _I32_MAX() { return (int)2147483647L; }

    static final int _UI32_MAX() { return (int)4294967295L; }

    static final long _I64_MIN() { return -9223372036854775808L; }

    static final long _I64_MAX() { return 9223372036854775807L; }

    static final long _UI64_MAX() { return -1L; }

    static final long SIZE_MAX() { return -1L; }

    static final long RSIZE_MAX() { return 9223372036854775807L; }

    static final long LONG_LONG_MAX() { return 9223372036854775807L; }

    static final long LONG_LONG_MIN() { return -9223372036854775808L; }

    static final long ULONG_LONG_MAX() { return -1L; }

    static final int _CVTBUFSIZE() { return (int)349L; }

    static final int CLSCTX_INPROC() { return (int)3L; }

    static final int CLSCTX_ALL() { return (int)23L; }

    static final int CLSCTX_SERVER() { return (int)21L; }

    static final MemoryAddress COLE_DEFAULT_PRINCIPAL$ADDR_CONSTANT_ = MemoryAddress.ofLong(-1L);
    static final jdk.incubator.foreign.MemoryAddress COLE_DEFAULT_PRINCIPAL() { return COLE_DEFAULT_PRINCIPAL$ADDR_CONSTANT_; }

    static final MemoryAddress COLE_DEFAULT_AUTHINFO$ADDR_CONSTANT_ = MemoryAddress.ofLong(-1L);
    static final jdk.incubator.foreign.MemoryAddress COLE_DEFAULT_AUTHINFO() { return COLE_DEFAULT_AUTHINFO$ADDR_CONSTANT_; }

    static final MemorySegment _CRT_INTERNAL_COMBASE_SYMBOL_PREFIX$SEGMENT_CONSTANT_ = CLinker.toCString("");
    static final jdk.incubator.foreign.MemorySegment _CRT_INTERNAL_COMBASE_SYMBOL_PREFIX() { return _CRT_INTERNAL_COMBASE_SYMBOL_PREFIX$SEGMENT_CONSTANT_; }

    static final int FADF_AUTO() { return (int)1L; }

    static final int FADF_STATIC() { return (int)2L; }

    static final int FADF_EMBEDDED() { return (int)4L; }

    static final int FADF_FIXEDSIZE() { return (int)16L; }

    static final int FADF_RECORD() { return (int)32L; }

    static final int FADF_HAVEIID() { return (int)64L; }

    static final int FADF_HAVEVARTYPE() { return (int)128L; }

    static final int FADF_BSTR() { return (int)256L; }

    static final int FADF_UNKNOWN() { return (int)512L; }

    static final int FADF_DISPATCH() { return (int)1024L; }

    static final int FADF_VARIANT() { return (int)2048L; }

    static final int FADF_RESERVED() { return (int)61448L; }

    static final int PARAMFLAG_NONE() { return (int)0L; }

    static final int PARAMFLAG_FIN() { return (int)1L; }

    static final int PARAMFLAG_FOUT() { return (int)2L; }

    static final int PARAMFLAG_FLCID() { return (int)4L; }

    static final int PARAMFLAG_FRETVAL() { return (int)8L; }

    static final int PARAMFLAG_FOPT() { return (int)16L; }

    static final int PARAMFLAG_FHASDEFAULT() { return (int)32L; }

    static final int PARAMFLAG_FHASCUSTDATA() { return (int)64L; }

    static final int IDLFLAG_NONE() { return (int)0L; }

    static final int IDLFLAG_FIN() { return (int)1L; }

    static final int IDLFLAG_FOUT() { return (int)2L; }

    static final int IDLFLAG_FLCID() { return (int)4L; }

    static final int IDLFLAG_FRETVAL() { return (int)8L; }

    static final int IMPLTYPEFLAG_FDEFAULT() { return (int)1L; }

    static final int IMPLTYPEFLAG_FSOURCE() { return (int)2L; }

    static final int IMPLTYPEFLAG_FRESTRICTED() { return (int)4L; }

    static final int IMPLTYPEFLAG_FDEFAULTVTABLE() { return (int)8L; }

    static final int DISPID_UNKNOWN() { return (int)-1L; }

    static final int DISPID_VALUE() { return (int)0L; }

    static final int DISPID_PROPERTYPUT() { return (int)-3L; }

    static final int DISPID_NEWENUM() { return (int)-4L; }

    static final int DISPID_EVALUATE() { return (int)-5L; }

    static final int DISPID_CONSTRUCTOR() { return (int)-6L; }

    static final int DISPID_DESTRUCTOR() { return (int)-7L; }

    static final int DISPID_COLLECT() { return (int)-8L; }

}

